// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _GDScriptLexer.flex

package grammars;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.floralvikings.godotea.language.gdscript.psi.GDScriptTypes.*;


public class _GDScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\6\27\1\30\1\31\1\32\1\33\1\34\1\0"+
    "\1\35\1\36\1\37\1\36\1\40\1\41\1\36\1\42"+
    "\1\43\1\44\2\43\1\45\1\46\1\47\1\50\1\43"+
    "\1\51\1\52\1\53\1\54\1\55\5\43\1\56\1\57"+
    "\1\60\1\61\1\62\1\0\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\43\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\43\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\43\1\112\1\113"+
    "\1\114\1\115\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\22\1\23\1\24\1\25"+
    "\1\26\1\2\3\27\1\30\1\31\1\32\1\33\20\27"+
    "\1\34\1\35\1\36\1\37\1\40\1\0\1\41\1\0"+
    "\1\7\1\42\1\43\1\44\1\0\1\45\1\0\1\46"+
    "\1\47\1\1\1\50\1\51\1\0\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\10\0"+
    "\1\27\1\64\2\27\1\65\15\27\1\66\1\67\1\70"+
    "\3\27\1\71\12\27\1\72\1\73\1\7\1\1\1\74"+
    "\1\75\7\0\1\27\1\76\14\27\1\77\1\27\1\100"+
    "\1\101\1\27\1\102\4\27\1\103\4\27\1\104\2\27"+
    "\3\0\1\105\3\0\3\27\1\106\4\27\1\107\1\110"+
    "\1\111\3\27\1\112\1\27\1\113\1\114\1\27\1\115"+
    "\3\27\1\116\1\117\1\27\1\0\1\120\2\0\1\121"+
    "\1\0\2\27\1\122\1\123\1\124\1\125\2\27\1\126"+
    "\1\127\1\130\3\27\1\131\1\132\4\0\1\27\1\133"+
    "\4\27\1\134\1\135\1\136\1\137\3\0\4\27\1\140"+
    "\1\0\1\141\2\0\3\27\1\142\14\0\3\27\20\0"+
    "\1\27\1\143\1\144\2\0\1\145\15\0\2\27\2\0"+
    "\1\146\1\0\1\147\12\0\2\27\3\0\1\150\1\0"+
    "\1\151\3\0\1\152\3\0\2\27\11\0\1\153\1\0"+
    "\2\27\13\0\1\154\2\27\1\155\12\0\1\156\2\27"+
    "\7\0\1\157\1\160\1\0\2\27\1\0\1\161\7\0"+
    "\1\162\2\0\2\27\10\0\1\163\1\164\2\27\10\0"+
    "\2\27\10\0\2\27\1\165\7\0\2\27\2\0\1\166"+
    "\2\0\1\167\1\170\2\27\1\0\1\171\1\0\1\172"+
    "\2\27\2\0\2\27\2\0\2\27\1\173\1\174\6\27"+
    "\1\175\1\176";

  private static int [] zzUnpackAction() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\116\0\116\0\234\0\352\0\u0138\0\u0186"+
    "\0\u01d4\0\u0222\0\u0270\0\116\0\116\0\u02be\0\u030c\0\116"+
    "\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492\0\u04e0\0\116\0\u052e"+
    "\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0702\0\116\0\116"+
    "\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972"+
    "\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94\0\u0be2"+
    "\0\u0c30\0\u0c7e\0\116\0\u0ccc\0\116\0\116\0\116\0\352"+
    "\0\116\0\u0d1a\0\u0d68\0\116\0\116\0\116\0\u0270\0\116"+
    "\0\u0db6\0\116\0\116\0\u0e04\0\116\0\116\0\u0e52\0\116"+
    "\0\116\0\u0ea0\0\u0eee\0\116\0\u0f3c\0\116\0\116\0\116"+
    "\0\u0f8a\0\u0fd8\0\u1026\0\u1074\0\u10c2\0\u1110\0\u115e\0\u11ac"+
    "\0\u11fa\0\u1248\0\116\0\u079e\0\u1296\0\u12e4\0\u1332\0\u1380"+
    "\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u15f0"+
    "\0\u163e\0\u168c\0\u16da\0\u0666\0\u1728\0\u0666\0\u1776\0\u17c4"+
    "\0\u1812\0\u0666\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6"+
    "\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e\0\116\0\116\0\116\0\u11fa"+
    "\0\116\0\116\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2"+
    "\0\u1d40\0\u1d8e\0\u0666\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14"+
    "\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u0666"+
    "\0\u2184\0\u0666\0\u0666\0\u21d2\0\u0666\0\u2220\0\u226e\0\u22bc"+
    "\0\u230a\0\u0666\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u0666\0\u2490"+
    "\0\u24de\0\u252c\0\u257a\0\u25c8\0\116\0\u2616\0\u2664\0\u26b2"+
    "\0\u2700\0\u274e\0\u279c\0\u0666\0\u27ea\0\u2838\0\u2886\0\u28d4"+
    "\0\u0666\0\u0666\0\u0666\0\u2922\0\u2970\0\u29be\0\u0666\0\u2a0c"+
    "\0\u0666\0\u0666\0\u2a5a\0\u0666\0\u2aa8\0\u2af6\0\u2b44\0\u0666"+
    "\0\u0666\0\u2b92\0\u2be0\0\116\0\u2c2e\0\u2c7c\0\116\0\u2cca"+
    "\0\u2d18\0\u2d66\0\u0666\0\u2db4\0\u2e02\0\u0666\0\u2e50\0\u2e9e"+
    "\0\u0666\0\u0666\0\u0666\0\u2eec\0\u2f3a\0\u2f88\0\u0666\0\u0666"+
    "\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u0666\0\u315c\0\u31aa"+
    "\0\u31f8\0\u3246\0\u0666\0\u0666\0\u0666\0\u3294\0\u32e2\0\u3330"+
    "\0\u337e\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u0666\0\u3504\0\116"+
    "\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u0666\0\u36d8\0\u3726"+
    "\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948\0\u3996"+
    "\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06"+
    "\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u3e76"+
    "\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u0666\0\u0666"+
    "\0\u4098\0\u40e6\0\116\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c"+
    "\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440\0\u448e\0\u44dc"+
    "\0\u452a\0\u4578\0\u45c6\0\u4614\0\116\0\u4662\0\116\0\u46b0"+
    "\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u4836\0\u4884\0\u48d2\0\u4920"+
    "\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6\0\u4af4\0\u4b42\0\u4b90"+
    "\0\116\0\u4bde\0\u4c2c\0\u4c7a\0\116\0\u4cc8\0\u4d16\0\u4d64"+
    "\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea\0\u4f38\0\u4f86\0\u4fd4"+
    "\0\u5022\0\u5070\0\u50be\0\116\0\u510c\0\u515a\0\u51a8\0\u51f6"+
    "\0\u5244\0\u5292\0\u52e0\0\u532e\0\u537c\0\u53ca\0\u5418\0\u5466"+
    "\0\u54b4\0\u5502\0\116\0\u5550\0\u559e\0\116\0\u55ec\0\u563a"+
    "\0\u5688\0\u56d6\0\u5724\0\u5772\0\u57c0\0\u580e\0\u585c\0\u58aa"+
    "\0\116\0\u58f8\0\u5946\0\u5994\0\u59e2\0\u5a30\0\u5a7e\0\u5acc"+
    "\0\u5b1a\0\u5b68\0\116\0\116\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0"+
    "\0\116\0\u5cee\0\u5d3c\0\u5d8a\0\u5dd8\0\u5e26\0\u5e74\0\u5ec2"+
    "\0\116\0\u5f10\0\u5f5e\0\u5fac\0\u5ffa\0\u6048\0\u6096\0\u60e4"+
    "\0\u6132\0\u6180\0\u61ce\0\u621c\0\u626a\0\116\0\116\0\u62b8"+
    "\0\u6306\0\u6354\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da\0\u6528"+
    "\0\u6576\0\u65c4\0\u6612\0\u6660\0\u66ae\0\u66fc\0\u674a\0\u6798"+
    "\0\u67e6\0\u6834\0\u6882\0\u68d0\0\u691e\0\116\0\u696c\0\u69ba"+
    "\0\u6a08\0\u6a56\0\u6aa4\0\u6af2\0\u6b40\0\u6b8e\0\u6bdc\0\u6c2a"+
    "\0\u6c78\0\116\0\u6cc6\0\u6d14\0\116\0\116\0\u6d62\0\u6db0"+
    "\0\u6dfe\0\116\0\u6e4c\0\116\0\u6e9a\0\u6ee8\0\u6f36\0\u6f84"+
    "\0\u6fd2\0\u7020\0\u706e\0\u70bc\0\u710a\0\u7158\0\116\0\116"+
    "\0\u71a6\0\u71f4\0\u7242\0\u7290\0\u72de\0\u732c\0\u0666\0\u0666";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\4\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\3\34\1\35\4\34\1\36\7\34"+
    "\1\37\1\2\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\34\1\46\1\47\1\50\1\34\1\51\2\34\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\34\1\61"+
    "\1\62\2\34\1\63\1\64\1\65\1\66\151\0\1\67"+
    "\62\0\5\70\1\71\51\70\1\72\36\70\2\7\1\0"+
    "\113\7\5\0\1\73\13\0\7\73\6\0\20\73\4\0"+
    "\30\73\37\0\1\74\73\0\1\75\21\0\1\76\62\0"+
    "\12\77\1\100\44\77\1\101\36\77\33\0\1\102\115\0"+
    "\1\103\103\0\1\104\1\0\5\25\3\0\1\105\1\106"+
    "\4\0\1\107\20\0\1\25\4\0\1\107\47\0\1\110"+
    "\1\0\5\104\11\0\1\107\20\0\1\104\4\0\1\107"+
    "\61\0\1\111\103\0\1\104\1\0\5\25\11\0\1\107"+
    "\20\0\1\25\1\0\1\112\2\0\1\107\20\0\1\113"+
    "\26\0\1\104\1\0\5\25\11\0\1\107\20\0\1\25"+
    "\4\0\1\107\61\0\1\114\114\0\1\115\1\116\115\0"+
    "\1\117\115\0\1\120\1\121\150\0\1\122\3\0\1\123"+
    "\4\0\1\124\1\0\1\125\1\126\1\127\2\0\1\130"+
    "\31\0\5\34\6\0\20\34\4\0\30\34\22\0\1\131"+
    "\1\0\1\131\2\0\5\34\6\0\20\34\4\0\30\34"+
    "\27\0\5\34\6\0\17\34\1\132\4\0\30\34\37\0"+
    "\1\133\103\0\1\104\1\0\5\134\6\0\3\34\1\35"+
    "\14\34\4\0\1\134\4\34\1\35\22\34\27\0\5\34"+
    "\6\0\20\34\4\0\15\34\1\135\3\34\1\136\3\34"+
    "\1\137\2\34\27\0\5\34\6\0\20\34\4\0\16\34"+
    "\1\140\1\34\1\141\7\34\27\0\5\34\6\0\20\34"+
    "\4\0\13\34\1\142\2\34\1\143\11\34\22\0\1\131"+
    "\1\0\1\131\2\0\5\34\6\0\20\34\4\0\13\34"+
    "\1\144\1\34\1\145\10\34\1\146\1\34\27\0\5\34"+
    "\6\0\20\34\4\0\1\34\1\147\11\34\1\150\2\34"+
    "\1\151\4\34\1\152\4\34\27\0\5\34\6\0\20\34"+
    "\4\0\5\34\1\153\22\34\27\0\5\34\6\0\20\34"+
    "\4\0\6\34\1\154\6\34\1\155\3\34\1\156\6\34"+
    "\27\0\5\34\6\0\20\34\4\0\1\34\1\157\26\34"+
    "\27\0\5\34\6\0\20\34\4\0\16\34\1\160\4\34"+
    "\1\161\4\34\27\0\5\34\6\0\20\34\4\0\20\34"+
    "\1\162\7\34\27\0\5\34\6\0\20\34\4\0\1\34"+
    "\1\163\26\34\27\0\5\34\6\0\20\34\4\0\5\34"+
    "\1\164\22\34\27\0\5\34\6\0\20\34\4\0\5\34"+
    "\1\165\3\34\1\166\10\34\1\167\1\170\4\34\27\0"+
    "\5\34\6\0\20\34\4\0\20\34\1\171\7\34\27\0"+
    "\5\34\6\0\20\34\4\0\1\34\1\172\14\34\1\173"+
    "\11\34\27\0\5\34\6\0\20\34\4\0\10\34\1\174"+
    "\17\34\37\0\1\175\57\0\1\176\2\0\2\70\2\0"+
    "\112\70\5\0\1\177\13\0\7\73\6\0\20\73\4\0"+
    "\30\73\4\0\2\77\2\0\112\77\23\0\5\104\11\0"+
    "\1\107\20\0\1\104\4\0\1\107\44\0\1\131\1\0"+
    "\1\131\2\0\5\200\111\0\2\112\35\0\1\112\56\0"+
    "\5\113\6\0\4\113\20\0\7\113\60\0\1\201\115\0"+
    "\1\202\172\0\1\203\72\0\1\204\127\0\1\205\117\0"+
    "\1\206\120\0\1\207\111\0\1\210\100\0\1\211\55\0"+
    "\5\200\111\0\5\34\6\0\7\34\1\212\10\34\4\0"+
    "\30\34\27\0\5\34\6\0\20\34\4\0\4\34\1\213"+
    "\23\34\27\0\5\34\6\0\20\34\4\0\21\34\1\214"+
    "\6\34\27\0\5\34\6\0\20\34\4\0\1\34\1\215"+
    "\26\34\27\0\5\34\6\0\20\34\4\0\16\34\1\216"+
    "\11\34\27\0\5\34\6\0\20\34\4\0\5\34\1\217"+
    "\22\34\27\0\5\34\6\0\20\34\4\0\1\34\1\220"+
    "\26\34\27\0\5\34\6\0\20\34\4\0\15\34\1\221"+
    "\12\34\27\0\5\34\6\0\20\34\4\0\11\34\1\222"+
    "\7\34\1\223\6\34\27\0\5\34\6\0\20\34\4\0"+
    "\23\34\1\224\4\34\27\0\5\34\6\0\20\34\4\0"+
    "\22\34\1\225\5\34\27\0\5\34\6\0\20\34\4\0"+
    "\13\34\1\226\14\34\27\0\5\34\6\0\20\34\4\0"+
    "\16\34\1\227\11\34\27\0\5\34\6\0\20\34\4\0"+
    "\20\34\1\230\7\34\27\0\5\34\6\0\20\34\4\0"+
    "\15\34\1\231\12\34\27\0\5\34\6\0\20\34\4\0"+
    "\22\34\1\232\5\34\27\0\5\34\6\0\20\34\4\0"+
    "\22\34\1\233\5\34\27\0\5\34\6\0\20\34\4\0"+
    "\22\34\1\234\5\34\27\0\5\34\6\0\20\34\4\0"+
    "\22\34\1\235\5\34\27\0\5\34\6\0\20\34\4\0"+
    "\13\34\1\236\14\34\27\0\5\34\6\0\20\34\4\0"+
    "\21\34\1\237\6\34\27\0\5\34\6\0\20\34\4\0"+
    "\22\34\1\240\5\34\27\0\5\34\6\0\20\34\4\0"+
    "\13\34\1\241\6\34\1\242\5\34\27\0\5\34\6\0"+
    "\20\34\4\0\7\34\1\243\20\34\27\0\5\34\6\0"+
    "\20\34\4\0\1\34\1\244\26\34\27\0\5\34\6\0"+
    "\20\34\4\0\17\34\1\245\10\34\27\0\5\34\6\0"+
    "\20\34\4\0\23\34\1\246\4\34\27\0\5\34\6\0"+
    "\20\34\4\0\20\34\1\247\7\34\27\0\5\34\6\0"+
    "\20\34\4\0\11\34\1\250\16\34\27\0\5\34\6\0"+
    "\20\34\4\0\11\34\1\251\16\34\105\0\1\252\114\0"+
    "\1\253\117\0\1\254\100\0\1\255\113\0\1\256\132\0"+
    "\1\257\117\0\1\260\36\0\5\34\6\0\16\34\1\261"+
    "\1\34\4\0\30\34\27\0\5\34\6\0\20\34\4\0"+
    "\5\34\1\262\22\34\27\0\5\34\6\0\20\34\4\0"+
    "\11\34\1\263\16\34\27\0\5\34\6\0\20\34\4\0"+
    "\13\34\1\264\14\34\27\0\5\34\6\0\20\34\4\0"+
    "\1\34\1\265\26\34\27\0\5\34\6\0\20\34\4\0"+
    "\21\34\1\266\6\34\27\0\5\34\6\0\20\34\4\0"+
    "\21\34\1\267\1\270\5\34\27\0\5\34\6\0\20\34"+
    "\4\0\6\34\1\271\21\34\27\0\5\34\6\0\20\34"+
    "\4\0\5\34\1\272\22\34\27\0\5\34\6\0\20\34"+
    "\4\0\14\34\1\273\13\34\27\0\5\34\6\0\20\34"+
    "\4\0\5\34\1\274\22\34\27\0\5\34\6\0\20\34"+
    "\4\0\21\34\1\275\6\34\27\0\5\34\6\0\20\34"+
    "\4\0\1\34\1\276\26\34\27\0\5\34\6\0\20\34"+
    "\4\0\3\34\1\277\24\34\27\0\5\34\6\0\20\34"+
    "\4\0\3\34\1\300\24\34\27\0\5\34\6\0\20\34"+
    "\4\0\13\34\1\301\14\34\27\0\5\34\6\0\20\34"+
    "\4\0\21\34\1\302\6\34\27\0\5\34\6\0\20\34"+
    "\4\0\23\34\1\303\4\34\27\0\5\34\6\0\20\34"+
    "\4\0\6\34\1\304\21\34\27\0\5\34\6\0\20\34"+
    "\4\0\15\34\1\305\12\34\27\0\5\34\6\0\20\34"+
    "\4\0\22\34\1\306\5\34\27\0\5\34\6\0\20\34"+
    "\4\0\5\34\1\307\22\34\27\0\5\34\6\0\20\34"+
    "\4\0\5\34\1\310\22\34\27\0\5\34\6\0\20\34"+
    "\4\0\4\34\1\311\23\34\27\0\5\34\6\0\20\34"+
    "\4\0\13\34\1\312\14\34\104\0\1\313\114\0\1\314"+
    "\105\0\1\315\132\0\1\316\106\0\1\317\117\0\1\320"+
    "\41\0\5\34\6\0\6\34\1\321\11\34\4\0\30\34"+
    "\27\0\5\34\6\0\20\34\4\0\20\34\1\322\7\34"+
    "\27\0\5\34\6\0\20\34\4\0\22\34\1\323\5\34"+
    "\27\0\5\34\6\0\20\34\4\0\12\34\1\324\15\34"+
    "\27\0\5\34\6\0\20\34\4\0\21\34\1\325\6\34"+
    "\27\0\5\34\6\0\20\34\4\0\22\34\1\326\5\34"+
    "\27\0\5\34\6\0\20\34\4\0\11\34\1\327\16\34"+
    "\27\0\5\34\6\0\20\34\4\0\15\34\1\330\12\34"+
    "\27\0\5\34\6\0\20\34\4\0\5\34\1\331\22\34"+
    "\27\0\5\34\6\0\20\34\4\0\22\34\1\332\5\34"+
    "\27\0\5\34\6\0\20\34\4\0\10\34\1\333\17\34"+
    "\27\0\5\34\6\0\20\34\4\0\20\34\1\334\7\34"+
    "\27\0\5\34\6\0\20\34\4\0\1\34\1\335\26\34"+
    "\27\0\5\34\6\0\20\34\4\0\11\34\1\336\16\34"+
    "\27\0\5\34\6\0\20\34\4\0\20\34\1\337\7\34"+
    "\27\0\5\34\6\0\20\34\4\0\5\34\1\340\22\34"+
    "\106\0\1\341\76\0\1\342\125\0\1\343\115\0\1\344"+
    "\45\0\5\34\6\0\7\34\1\345\10\34\4\0\30\34"+
    "\27\0\5\34\6\0\20\34\4\0\22\34\1\346\5\34"+
    "\27\0\5\34\6\0\20\34\4\0\17\34\1\347\10\34"+
    "\27\0\5\34\6\0\20\34\4\0\1\350\27\34\27\0"+
    "\5\34\6\0\20\34\4\0\15\34\1\351\12\34\27\0"+
    "\5\34\6\0\20\34\4\0\4\34\1\352\23\34\27\0"+
    "\5\34\6\0\20\34\4\0\15\34\1\353\12\34\27\0"+
    "\5\34\6\0\20\34\4\0\13\34\1\354\14\34\27\0"+
    "\5\34\6\0\20\34\4\0\3\34\1\355\24\34\110\0"+
    "\1\356\77\0\1\357\114\0\1\360\127\0\1\361\41\0"+
    "\5\34\6\0\6\34\1\362\11\34\4\0\30\34\27\0"+
    "\5\34\6\0\20\34\4\0\16\34\1\363\11\34\27\0"+
    "\5\34\6\0\20\34\4\0\15\34\1\364\12\34\27\0"+
    "\5\34\6\0\20\34\4\0\23\34\1\365\4\34\27\0"+
    "\5\34\6\0\20\34\4\0\21\34\1\366\6\34\66\0"+
    "\1\367\144\0\1\370\66\0\1\371\124\0\1\372\47\0"+
    "\5\34\6\0\11\34\1\373\6\34\4\0\30\34\27\0"+
    "\5\34\6\0\20\34\4\0\11\34\1\374\16\34\27\0"+
    "\5\34\6\0\20\34\4\0\1\34\1\375\26\34\27\0"+
    "\5\34\6\0\20\34\4\0\5\34\1\376\22\34\71\0"+
    "\1\377\1\u0100\1\u0101\1\u0102\1\u0103\4\0\1\u0104\1\u0105"+
    "\1\0\1\u0106\1\u0107\1\u0108\117\0\1\u0109\72\0\1\u010a"+
    "\56\0\5\34\6\0\3\34\1\u010b\14\34\4\0\30\34"+
    "\27\0\5\34\6\0\20\34\4\0\15\34\1\u010c\12\34"+
    "\27\0\5\34\6\0\20\34\4\0\14\34\1\u010d\13\34"+
    "\67\0\1\u010e\14\0\1\u010f\110\0\1\u0110\121\0\1\u0111"+
    "\10\0\1\u0112\100\0\1\u0113\1\0\1\u0114\115\0\1\u0115"+
    "\4\0\1\u0116\120\0\1\u0117\110\0\1\u0118\112\0\1\u0119"+
    "\103\0\1\u011a\137\0\1\u011b\107\0\1\u011c\111\0\1\u011d"+
    "\45\0\5\34\6\0\20\34\4\0\1\u011e\27\34\27\0"+
    "\5\34\6\0\20\34\4\0\22\34\1\u011f\5\34\27\0"+
    "\5\34\6\0\20\34\4\0\5\34\1\u0120\22\34\110\0"+
    "\1\u0121\106\0\1\u0122\122\0\1\u0123\120\0\1\u0124\111\0"+
    "\1\u0125\111\0\1\u0126\103\0\1\u0127\132\0\1\u0128\115\0"+
    "\1\u0129\112\0\1\u012a\106\0\1\u012b\112\0\1\u012c\131\0"+
    "\1\u012d\102\0\1\u012e\126\0\1\u012f\111\0\1\u0130\47\0"+
    "\5\34\6\0\2\34\1\u0131\12\34\1\u0132\2\34\4\0"+
    "\30\34\73\0\1\u0133\126\0\1\u0134\113\0\1\u0135\101\0"+
    "\1\u0136\122\0\1\u0137\117\0\1\u0138\110\0\1\u0139\136\0"+
    "\1\u013a\114\0\1\u013b\100\0\1\u013c\113\0\1\u013d\121\0"+
    "\1\u013e\115\0\1\u013f\124\0\1\u0140\114\0\1\u0141\41\0"+
    "\5\34\6\0\12\34\1\u0142\5\34\4\0\30\34\27\0"+
    "\5\34\6\0\6\34\1\u0143\11\34\4\0\30\34\75\0"+
    "\1\u0144\126\0\1\u0145\102\0\1\u0146\131\0\1\u0147\75\0"+
    "\1\u0148\133\0\1\u0149\107\0\1\u014a\104\0\1\u014b\122\0"+
    "\1\u014c\115\0\1\u014d\130\0\1\u014e\76\0\1\u014f\132\0"+
    "\1\u0150\40\0\5\34\6\0\17\34\1\u0151\4\0\30\34"+
    "\27\0\5\34\6\0\11\34\1\u0152\6\34\4\0\30\34"+
    "\104\0\1\u0153\77\0\1\u0154\116\0\1\u0155\114\0\1\u0156"+
    "\130\0\1\u0157\115\0\1\u0158\121\0\1\u0159\106\0\1\u015a"+
    "\123\0\1\u015b\103\0\1\u015c\131\0\1\u015d\36\0\5\34"+
    "\6\0\1\34\1\u015e\16\34\4\0\30\34\27\0\5\34"+
    "\6\0\4\34\1\u015f\13\34\4\0\30\34\106\0\1\u0160"+
    "\112\0\1\u0161\121\0\1\u0162\37\0\1\u0163\1\u0164\34\0"+
    "\1\u0165\114\0\1\u0166\126\0\1\u0167\105\0\1\u0168\132\0"+
    "\1\u0169\122\0\1\u016a\77\0\1\u016b\51\0\5\34\6\0"+
    "\7\34\1\u016c\10\34\4\0\30\34\27\0\5\34\6\0"+
    "\7\34\1\u016d\10\34\4\0\30\34\115\0\1\u016e\104\0"+
    "\1\u016f\110\0\1\u0170\110\0\1\u0171\115\0\1\u0172\135\0"+
    "\1\u0173\75\0\1\u0174\1\0\1\u0175\124\0\1\u0176\122\0"+
    "\1\u0177\106\0\1\u0178\121\0\1\u0179\37\0\5\34\6\0"+
    "\3\34\1\u017a\14\34\4\0\30\34\27\0\5\34\6\0"+
    "\3\34\1\u017b\14\34\4\0\30\34\66\0\1\u017c\132\0"+
    "\1\u017d\100\0\1\u017e\115\0\1\u017f\133\0\1\u0180\110\0"+
    "\1\u0181\115\0\1\u0182\111\0\1\u0183\120\0\1\u0184\111\0"+
    "\1\u0185\52\0\5\34\6\0\20\34\4\0\1\u0186\27\34"+
    "\27\0\5\34\6\0\20\34\4\0\1\u0187\27\34\67\0"+
    "\1\u0188\123\0\1\u0189\123\0\1\u018a\1\0\1\u018b\1\u018c"+
    "\112\0\1\u018d\1\0\1\u018e\1\u018f\106\0\1\u0190\124\0"+
    "\1\u0191\110\0\1\u0192\107\0\1\u0193\51\0\5\34\6\0"+
    "\13\34\1\u0194\4\34\4\0\30\34\27\0\5\34\6\0"+
    "\13\34\1\u0195\4\34\4\0\30\34\101\0\1\u0196\103\0"+
    "\1\u0197\124\0\1\u0198\112\0\1\u0199\111\0\1\u019a\124\0"+
    "\1\u019b\112\0\1\u019c\114\0\1\u019d\116\0\1\u019e\130\0"+
    "\1\u019f\36\0\5\34\6\0\17\34\1\u01a0\4\0\30\34"+
    "\27\0\5\34\6\0\17\34\1\u01a1\4\0\30\34\105\0"+
    "\1\u01a2\122\0\1\u01a3\120\0\1\u01a4\103\0\1\u01a5\124\0"+
    "\1\u01a6\120\0\1\u01a7\103\0\1\u01a8\101\0\1\u01a9\55\0"+
    "\5\34\6\0\12\34\1\u01aa\5\34\4\0\30\34\27\0"+
    "\5\34\6\0\12\34\1\u01ab\5\34\4\0\30\34\76\0"+
    "\1\u01ac\116\0\1\u01ad\125\0\1\u01ae\100\0\1\u01af\122\0"+
    "\1\u01b0\125\0\1\u01b1\100\0\1\u01b2\126\0\1\u01b3\41\0"+
    "\5\34\6\0\16\34\1\u01b4\1\34\4\0\30\34\27\0"+
    "\5\34\6\0\16\34\1\u01b5\1\34\4\0\30\34\67\0"+
    "\1\u01b6\123\0\1\u01b7\117\0\1\u01b8\111\0\1\u01b9\117\0"+
    "\1\u01ba\117\0\1\u01bb\111\0\1\u01bc\113\0\1\u01bd\53\0"+
    "\5\34\6\0\3\34\1\u01be\14\34\4\0\30\34\27\0"+
    "\5\34\6\0\3\34\1\u01bf\14\34\4\0\30\34\67\0"+
    "\1\u01c0\117\0\1\u01c1\132\0\1\u01c2\76\0\1\u01c3\117\0"+
    "\1\u01c4\132\0\1\u01c5\102\0\1\u01c6\51\0\5\34\6\0"+
    "\2\34\1\u01c7\15\34\4\0\30\34\27\0\5\34\6\0"+
    "\2\34\1\u01c8\15\34\4\0\30\34\110\0\1\u01c9\114\0"+
    "\1\u01ca\116\0\1\u01cb\114\0\1\u01cc\35\0\5\34\6\0"+
    "\20\34\4\0\1\u01cd\27\34\27\0\5\34\6\0\20\34"+
    "\4\0\1\u01ce\27\34\77\0\1\u01cf\115\0\1\u01d0\45\0"+
    "\5\34\6\0\15\34\1\u01d1\2\34\4\0\30\34\27\0"+
    "\5\34\6\0\15\34\1\u01d2\2\34\4\0\30\34\104\0"+
    "\1\u01d3\115\0\1\u01d4\40\0\5\34\6\0\16\34\1\u01d5"+
    "\1\34\4\0\30\34\27\0\5\34\6\0\16\34\1\u01d6"+
    "\1\34\4\0\30\34\103\0\1\u01d7\115\0\1\u01d8\41\0"+
    "\5\34\6\0\14\34\1\u01d9\3\34\4\0\30\34\27\0"+
    "\5\34\6\0\14\34\1\u01da\3\34\4\0\30\34\27\0"+
    "\5\34\6\0\6\34\1\u01db\11\34\4\0\30\34\27\0"+
    "\5\34\6\0\6\34\1\u01dc\11\34\4\0\30\34\27\0"+
    "\5\34\6\0\11\34\1\u01dd\6\34\4\0\30\34\27\0"+
    "\5\34\6\0\11\34\1\u01de\6\34\4\0\30\34\27\0"+
    "\5\34\6\0\4\34\1\u01df\13\34\4\0\30\34\27\0"+
    "\5\34\6\0\4\34\1\u01e0\13\34\4\0\30\34\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[29562];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\11\7\1\2\11\2\1\1\11\6\1\1\11"+
    "\7\1\2\11\22\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\0\1\1\3\11\1\0\1\11\1\0\2\11\1\1"+
    "\2\11\1\0\2\11\2\1\1\11\1\1\3\11\1\1"+
    "\10\0\1\1\1\11\41\1\3\11\1\1\2\11\7\0"+
    "\40\1\3\0\1\11\3\0\32\1\1\0\1\11\2\0"+
    "\1\11\1\0\20\1\4\0\12\1\3\0\5\1\1\0"+
    "\1\11\2\0\4\1\14\0\3\1\20\0\3\1\2\0"+
    "\1\11\15\0\2\1\2\0\1\11\1\0\1\11\12\0"+
    "\2\1\3\0\1\1\1\0\1\11\3\0\1\11\3\0"+
    "\2\1\11\0\1\11\1\0\2\1\13\0\1\11\2\1"+
    "\1\11\12\0\1\11\2\1\7\0\2\11\1\0\2\1"+
    "\1\0\1\11\7\0\1\11\2\0\2\1\10\0\2\11"+
    "\2\1\10\0\2\1\10\0\2\1\1\11\7\0\2\1"+
    "\2\0\1\11\2\0\2\11\2\1\1\0\1\11\1\0"+
    "\1\11\2\1\2\0\2\1\2\0\2\1\2\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _GDScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GDScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return REAL_NUMBER;
            }
          // fall through
          case 127: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 128: break;
          case 3:
            { return WHITE_SPACE;
            }
          // fall through
          case 129: break;
          case 4:
            { return LINE_BREAK;
            }
          // fall through
          case 130: break;
          case 5:
            { return BANG;
            }
          // fall through
          case 131: break;
          case 6:
            { return LINE_COMMENT;
            }
          // fall through
          case 132: break;
          case 7:
            { return NODE_PATH;
            }
          // fall through
          case 133: break;
          case 8:
            { return PERCENT;
            }
          // fall through
          case 134: break;
          case 9:
            { return AMPERSAND;
            }
          // fall through
          case 135: break;
          case 10:
            { return L_PAREN;
            }
          // fall through
          case 136: break;
          case 11:
            { return R_PAREN;
            }
          // fall through
          case 137: break;
          case 12:
            { return STAR;
            }
          // fall through
          case 138: break;
          case 13:
            { return PLUS;
            }
          // fall through
          case 139: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 140: break;
          case 15:
            { return MINUS;
            }
          // fall through
          case 141: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 142: break;
          case 17:
            { return SLASH;
            }
          // fall through
          case 143: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 144: break;
          case 19:
            { return SEMICOLON;
            }
          // fall through
          case 145: break;
          case 20:
            { return LESS;
            }
          // fall through
          case 146: break;
          case 21:
            { return EQUAL;
            }
          // fall through
          case 147: break;
          case 22:
            { return GREATER;
            }
          // fall through
          case 148: break;
          case 23:
            { return IDENTIFIER;
            }
          // fall through
          case 149: break;
          case 24:
            { return L_BRACKET;
            }
          // fall through
          case 150: break;
          case 25:
            { return R_BRACKET;
            }
          // fall through
          case 151: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 152: break;
          case 27:
            { return UNDERSCORE;
            }
          // fall through
          case 153: break;
          case 28:
            { return L_BRACE;
            }
          // fall through
          case 154: break;
          case 29:
            { return PIPE;
            }
          // fall through
          case 155: break;
          case 30:
            { return R_BRACE;
            }
          // fall through
          case 156: break;
          case 31:
            { return TILDE;
            }
          // fall through
          case 157: break;
          case 32:
            { return BANG_EQUAL;
            }
          // fall through
          case 158: break;
          case 33:
            { return DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 159: break;
          case 34:
            { return PERCENT_EQUAL;
            }
          // fall through
          case 160: break;
          case 35:
            { return AMPERSAND_AMPERSAND;
            }
          // fall through
          case 161: break;
          case 36:
            { return AMPERSAND_EQUAL;
            }
          // fall through
          case 162: break;
          case 37:
            { return SINGLE_QUOTED_STRING;
            }
          // fall through
          case 163: break;
          case 38:
            { return STAR_EQUAL;
            }
          // fall through
          case 164: break;
          case 39:
            { return PLUS_EQUAL;
            }
          // fall through
          case 165: break;
          case 40:
            { return MINUS_EQUAL;
            }
          // fall through
          case 166: break;
          case 41:
            { return ARROW;
            }
          // fall through
          case 167: break;
          case 42:
            { return DOT_DOT;
            }
          // fall through
          case 168: break;
          case 43:
            { return SLASH_EQUAL;
            }
          // fall through
          case 169: break;
          case 44:
            { return BINARY_NUMBER;
            }
          // fall through
          case 170: break;
          case 45:
            { return HEXADECIMAL_NUMBER;
            }
          // fall through
          case 171: break;
          case 46:
            { return INFER;
            }
          // fall through
          case 172: break;
          case 47:
            { return LESS_LESS;
            }
          // fall through
          case 173: break;
          case 48:
            { return LESS_EQUAL;
            }
          // fall through
          case 174: break;
          case 49:
            { return EQUAL_EQUAL;
            }
          // fall through
          case 175: break;
          case 50:
            { return GREATER_EQUAL;
            }
          // fall through
          case 176: break;
          case 51:
            { return GREATER_GREATER;
            }
          // fall through
          case 177: break;
          case 52:
            { return CARET_EQUAL;
            }
          // fall through
          case 178: break;
          case 53:
            { return AS;
            }
          // fall through
          case 179: break;
          case 54:
            { return IF;
            }
          // fall through
          case 180: break;
          case 55:
            { return IN;
            }
          // fall through
          case 181: break;
          case 56:
            { return IS;
            }
          // fall through
          case 182: break;
          case 57:
            { return OR;
            }
          // fall through
          case 183: break;
          case 58:
            { return PIPE_EQUAL;
            }
          // fall through
          case 184: break;
          case 59:
            { return PIPE_PIPE;
            }
          // fall through
          case 185: break;
          case 60:
            { return LESS_LESS_EQUAL;
            }
          // fall through
          case 186: break;
          case 61:
            { return GREATER_GREATER_EQUAL;
            }
          // fall through
          case 187: break;
          case 62:
            { return AND;
            }
          // fall through
          case 188: break;
          case 63:
            { return FOR;
            }
          // fall through
          case 189: break;
          case 64:
            { return GET;
            }
          // fall through
          case 190: break;
          case 65:
            { return INT;
            }
          // fall through
          case 191: break;
          case 66:
            { return NOT;
            }
          // fall through
          case 192: break;
          case 67:
            { return SET;
            }
          // fall through
          case 193: break;
          case 68:
            { return VAR;
            }
          // fall through
          case 194: break;
          case 69:
            { return AT_RPC;
            }
          // fall through
          case 195: break;
          case 70:
            { return BOOL;
            }
          // fall through
          case 196: break;
          case 71:
            { return ELIF;
            }
          // fall through
          case 197: break;
          case 72:
            { return ELSE;
            }
          // fall through
          case 198: break;
          case 73:
            { return ENUM;
            }
          // fall through
          case 199: break;
          case 74:
            { return FUNC;
            }
          // fall through
          case 200: break;
          case 75:
            { return NULL;
            }
          // fall through
          case 201: break;
          case 76:
            { return PASS;
            }
          // fall through
          case 202: break;
          case 77:
            { return SELF;
            }
          // fall through
          case 203: break;
          case 78:
            { return TRUE;
            }
          // fall through
          case 204: break;
          case 79:
            { return VOID;
            }
          // fall through
          case 205: break;
          case 80:
            { return AT_ICON;
            }
          // fall through
          case 206: break;
          case 81:
            { return AT_TOOL;
            }
          // fall through
          case 207: break;
          case 82:
            { return AWAIT;
            }
          // fall through
          case 208: break;
          case 83:
            { return BREAK;
            }
          // fall through
          case 209: break;
          case 84:
            { return CLASS;
            }
          // fall through
          case 210: break;
          case 85:
            { return CONST;
            }
          // fall through
          case 211: break;
          case 86:
            { return FALSE;
            }
          // fall through
          case 212: break;
          case 87:
            { return FLOAT;
            }
          // fall through
          case 213: break;
          case 88:
            { return MATCH;
            }
          // fall through
          case 214: break;
          case 89:
            { return SUPER;
            }
          // fall through
          case 215: break;
          case 90:
            { return WHILE;
            }
          // fall through
          case 216: break;
          case 91:
            { return ASSERT;
            }
          // fall through
          case 217: break;
          case 92:
            { return RETURN;
            }
          // fall through
          case 218: break;
          case 93:
            { return SIGNAL;
            }
          // fall through
          case 219: break;
          case 94:
            { return STATIC;
            }
          // fall through
          case 220: break;
          case 95:
            { return AT_EXPORT;
            }
          // fall through
          case 221: break;
          case 96:
            { return EXTENDS;
            }
          // fall through
          case 222: break;
          case 97:
            { return AT_ONREADY;
            }
          // fall through
          case 223: break;
          case 98:
            { return CONTINUE;
            }
          // fall through
          case 224: break;
          case 99:
            { return BREAKPOINT;
            }
          // fall through
          case 225: break;
          case 100:
            { return CLASS_NAME;
            }
          // fall through
          case 226: break;
          case 101:
            { return AT_EXPORT_DIR;
            }
          // fall through
          case 227: break;
          case 102:
            { return AT_EXPORT_ENUM;
            }
          // fall through
          case 228: break;
          case 103:
            { return AT_EXPORT_FILE;
            }
          // fall through
          case 229: break;
          case 104:
            { return AT_EXPORT_FLAGS;
            }
          // fall through
          case 230: break;
          case 105:
            { return AT_EXPORT_GROUP;
            }
          // fall through
          case 231: break;
          case 106:
            { return AT_EXPORT_RANGE;
            }
          // fall through
          case 232: break;
          case 107:
            { return AT_STATIC_UNLOAD;
            }
          // fall through
          case 233: break;
          case 108:
            { return AT_WARNING_IGNORE;
            }
          // fall through
          case 234: break;
          case 109:
            { return AT_EXPORT_CATEGORY;
            }
          // fall through
          case 235: break;
          case 110:
            { return AT_EXPORT_SUBGROUP;
            }
          // fall through
          case 236: break;
          case 111:
            { return AT_EXPORT_MULTILINE;
            }
          // fall through
          case 237: break;
          case 112:
            { return AT_EXPORT_NODE_PATH;
            }
          // fall through
          case 238: break;
          case 113:
            { return AT_EXPORT_EXP_EASING;
            }
          // fall through
          case 239: break;
          case 114:
            { return AT_EXPORT_GLOBAL_DIR;
            }
          // fall through
          case 240: break;
          case 115:
            { return AT_EXPORT_GLOBAL_FILE;
            }
          // fall through
          case 241: break;
          case 116:
            { return AT_EXPORT_PLACEHOLDER;
            }
          // fall through
          case 242: break;
          case 117:
            { return AT_EXPORT_COLOR_NO_ALPHA;
            }
          // fall through
          case 243: break;
          case 118:
            { return AT_EXPORT_FLAGS_2D_RENDER;
            }
          // fall through
          case 244: break;
          case 119:
            { return AT_EXPORT_FLAGS_3D_RENDER;
            }
          // fall through
          case 245: break;
          case 120:
            { return AT_EXPORT_FLAGS_AVOIDANCE;
            }
          // fall through
          case 246: break;
          case 121:
            { return AT_EXPORT_FLAGS_2D_PHYSICS;
            }
          // fall through
          case 247: break;
          case 122:
            { return AT_EXPORT_FLAGS_3D_PHYSICS;
            }
          // fall through
          case 248: break;
          case 123:
            { return AT_EXPORT_FLAGS_2D_NAVIGATION;
            }
          // fall through
          case 249: break;
          case 124:
            { return AT_EXPORT_FLAGS_3D_NAVIGATION;
            }
          // fall through
          case 250: break;
          case 125:
            { return MULTILINE_DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 251: break;
          case 126:
            { return MULTILINE_SINGLE_QUOTED_STRING;
            }
          // fall through
          case 252: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
