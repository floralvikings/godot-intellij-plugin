/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.floralvikings.godotea.language.gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.floralvikings.godotea.language.gdscript.psi.GDScriptTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/cbrinkman/Projects/godot-intellij-plugin/src/main/resources/com/github/floralvikings/godotea/language/gdscript/_GDScriptLexer.flex</tt>
 */
public class _GDScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\61\1\5\1\11\1\4\1\67\1\62\1\25\1\75\1\76\1\66"+
    "\1\16\1\77\1\12\1\14\1\6\1\17\1\21\1\54\1\55\6\10\1\70\1\100\1\56\1\57\1\60"+
    "\1\0\1\52\1\23\1\115\1\23\1\113\1\15\1\23\1\110\1\7\1\105\2\7\1\103\1\101"+
    "\1\106\1\112\1\7\1\111\1\114\1\107\1\104\1\102\5\7\1\71\1\24\1\72\1\65\1\13"+
    "\1\0\1\27\1\20\1\31\1\50\1\36\1\41\1\51\1\45\1\42\1\7\1\46\1\43\1\40\1\33"+
    "\1\32\1\47\1\7\1\30\1\34\1\35\1\37\1\26\1\44\1\22\1\53\1\7\1\73\1\63\1\74"+
    "\1\64\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\2\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\7\1\14\1\1"+
    "\1\7\1\2\17\7\1\2\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\7"+
    "\1\5\1\0\1\40\1\0\1\41\1\1\1\0\1\42"+
    "\1\43\1\7\1\44\1\0\1\45\1\46\1\47\2\7"+
    "\2\0\1\50\3\7\1\51\4\7\1\52\17\7\1\53"+
    "\1\54\1\55\3\7\7\0\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\7\1\5\1\1\2\7\1\74\1\7"+
    "\1\75\5\7\1\76\2\7\1\77\12\7\1\100\2\7"+
    "\1\101\2\7\1\102\7\0\1\103\1\104\2\7\1\105"+
    "\1\106\6\7\1\107\1\7\1\110\2\7\1\111\1\7"+
    "\1\112\1\113\1\114\2\7\1\115\2\7\1\116\1\117"+
    "\6\0\1\7\1\120\1\7\1\121\1\7\1\122\1\7"+
    "\1\123\1\7\1\124\2\7\1\125\1\126\1\127\1\130"+
    "\2\0\1\131\1\0\1\132\1\0\2\7\1\133\1\134"+
    "\2\7\1\135\1\136\1\7\4\0\4\7\1\137\2\0"+
    "\1\140\1\0\2\7\1\141\1\7\1\142\3\0\3\7"+
    "\14\0\1\7\1\143\1\144\20\0\1\7\14\0\1\145"+
    "\3\0\2\7\7\0\1\146\1\0\1\147\5\0\2\7"+
    "\1\0\1\150\6\0\1\151\1\0\1\152\2\0\2\7"+
    "\1\153\12\0\2\7\13\0\1\154\2\7\1\155\2\0"+
    "\1\156\10\0\2\7\1\0\1\157\1\0\1\160\6\0"+
    "\2\7\1\0\1\161\11\0\1\162\2\7\10\0\1\163"+
    "\1\164\2\7\10\0\2\7\10\0\2\7\1\165\7\0"+
    "\2\7\1\166\1\167\2\0\1\170\2\0\2\7\1\0"+
    "\1\171\1\0\1\172\2\7\2\0\2\7\2\0\2\7"+
    "\1\173\1\174\6\7\1\175\1\176";

  private static int [] zzUnpackAction() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\116\0\116\0\234\0\352\0\u0138\0\u0186"+
    "\0\u01d4\0\u0222\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6"+
    "\0\u0444\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666"+
    "\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6"+
    "\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46"+
    "\0\116\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\116\0\116\0\116"+
    "\0\116\0\116\0\116\0\116\0\116\0\u0ccc\0\u0d1a\0\352"+
    "\0\116\0\u0d68\0\116\0\u0db6\0\u0e04\0\116\0\116\0\u02be"+
    "\0\116\0\u0e52\0\116\0\u0ea0\0\u0eee\0\u0f3c\0\u0f8a\0\u0492"+
    "\0\u0fd8\0\116\0\u1026\0\u1074\0\u10c2\0\u1110\0\u115e\0\u11ac"+
    "\0\u11fa\0\u1248\0\u0186\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce"+
    "\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u163e"+
    "\0\u168c\0\u16da\0\u1728\0\u0186\0\u0186\0\u1776\0\u17c4\0\u1812"+
    "\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82"+
    "\0\116\0\116\0\116\0\u1ad0\0\116\0\116\0\116\0\116"+
    "\0\116\0\116\0\116\0\116\0\116\0\u1b1e\0\116\0\u0e52"+
    "\0\u1b6c\0\u1bba\0\u0186\0\u1c08\0\u0186\0\u1c56\0\u1ca4\0\u1cf2"+
    "\0\u1d40\0\u1d8e\0\u0186\0\u1ddc\0\u1e2a\0\u0186\0\u1e78\0\u1ec6"+
    "\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136"+
    "\0\u0186\0\u2184\0\u21d2\0\u0186\0\u2220\0\u226e\0\u0186\0\u22bc"+
    "\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\116\0\116"+
    "\0\u24de\0\u252c\0\u0186\0\u0186\0\u257a\0\u25c8\0\u2616\0\u2664"+
    "\0\u26b2\0\u2700\0\u0186\0\u274e\0\u0186\0\u279c\0\u27ea\0\u0186"+
    "\0\u2838\0\u0186\0\u0186\0\u0186\0\u2886\0\u28d4\0\u0186\0\u2922"+
    "\0\u2970\0\u0186\0\116\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6"+
    "\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u0186\0\u2c7c\0\u0186\0\u2cca"+
    "\0\u2d18\0\u2d66\0\u0186\0\u2db4\0\u2e02\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u2e50\0\u2e9e\0\116\0\u2eec\0\116\0\u2f3a\0\u2f88"+
    "\0\u2fd6\0\u0186\0\u0186\0\u3024\0\u3072\0\u0186\0\u0186\0\u30c0"+
    "\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u3330"+
    "\0\u0186\0\u337e\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504\0\u0186"+
    "\0\u3552\0\116\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u3726"+
    "\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948\0\u3996"+
    "\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u0186\0\u0186\0\u3b6a"+
    "\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda"+
    "\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a"+
    "\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba"+
    "\0\u4308\0\u4356\0\u43a4\0\u43f2\0\116\0\u4440\0\u448e\0\u44dc"+
    "\0\u452a\0\u4578\0\u45c6\0\u4614\0\u4662\0\u46b0\0\u46fe\0\u474c"+
    "\0\u479a\0\116\0\u47e8\0\116\0\u4836\0\u4884\0\u48d2\0\u4920"+
    "\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\116\0\u4aa6\0\u4af4\0\u4b42"+
    "\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u4cc8\0\116\0\u4d16\0\u4d64"+
    "\0\u4db2\0\u4e00\0\116\0\u4e4e\0\u4e9c\0\u4eea\0\u4f38\0\u4f86"+
    "\0\u4fd4\0\u5022\0\u5070\0\u50be\0\u510c\0\u515a\0\u51a8\0\u51f6"+
    "\0\u5244\0\u5292\0\u52e0\0\u532e\0\u537c\0\u53ca\0\u5418\0\u5466"+
    "\0\u54b4\0\u5502\0\116\0\u5550\0\u559e\0\116\0\u55ec\0\u563a"+
    "\0\116\0\u5688\0\u56d6\0\u5724\0\u5772\0\u57c0\0\u580e\0\u585c"+
    "\0\u58aa\0\u58f8\0\u5946\0\u5994\0\116\0\u59e2\0\116\0\u5a30"+
    "\0\u5a7e\0\u5acc\0\u5b1a\0\u5b68\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0"+
    "\0\116\0\u5cee\0\u5d3c\0\u5d8a\0\u5dd8\0\u5e26\0\u5e74\0\u5ec2"+
    "\0\u5f10\0\u5f5e\0\116\0\u5fac\0\u5ffa\0\u6048\0\u6096\0\u60e4"+
    "\0\u6132\0\u6180\0\u61ce\0\u621c\0\u626a\0\116\0\116\0\u62b8"+
    "\0\u6306\0\u6354\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da\0\u6528"+
    "\0\u6576\0\u65c4\0\u6612\0\u6660\0\u66ae\0\u66fc\0\u674a\0\u6798"+
    "\0\u67e6\0\u6834\0\u6882\0\u68d0\0\u691e\0\116\0\u696c\0\u69ba"+
    "\0\u6a08\0\u6a56\0\u6aa4\0\u6af2\0\u6b40\0\u6b8e\0\u6bdc\0\116"+
    "\0\116\0\u6c2a\0\u6c78\0\116\0\u6cc6\0\u6d14\0\u6d62\0\u6db0"+
    "\0\u6dfe\0\116\0\u6e4c\0\116\0\u6e9a\0\u6ee8\0\u6f36\0\u6f84"+
    "\0\u6fd2\0\u7020\0\u706e\0\u70bc\0\u710a\0\u7158\0\116\0\116"+
    "\0\u71a6\0\u71f4\0\u7242\0\u7290\0\u72de\0\u732c\0\u0186\0\u0186";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\11\2\10\1\2\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\10\1\34\1\35"+
    "\1\36\1\10\1\37\2\10\1\40\1\10\1\41\1\42"+
    "\1\10\2\11\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\14\10\123\0"+
    "\4\67\2\0\3\67\1\0\5\67\2\0\24\67\1\0"+
    "\3\67\23\0\15\67\5\70\1\71\16\70\1\72\71\70"+
    "\57\0\1\73\45\0\2\10\2\0\1\10\1\0\1\10"+
    "\1\0\5\10\2\0\24\10\1\0\3\10\23\0\15\10"+
    "\10\0\1\11\2\0\1\11\1\74\1\75\1\0\1\11"+
    "\1\0\1\11\14\0\1\75\15\0\2\11\40\0\2\12"+
    "\1\0\113\12\10\0\1\11\2\0\1\11\1\74\1\75"+
    "\1\0\1\11\1\0\1\11\14\0\1\75\15\0\2\11"+
    "\1\0\1\76\1\77\44\0\1\10\1\100\2\0\1\100"+
    "\1\74\1\16\1\0\1\100\1\10\1\100\2\10\2\0"+
    "\10\10\1\16\13\10\1\0\1\10\2\100\23\0\15\10"+
    "\10\0\1\74\2\0\1\74\1\101\1\75\1\0\1\74"+
    "\1\0\1\74\14\0\1\75\15\0\2\74\47\0\2\10"+
    "\1\0\1\102\1\10\1\0\1\10\1\102\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\15\10\57\0\1\103\46\0"+
    "\1\11\2\0\1\11\1\74\1\75\1\0\1\11\1\104"+
    "\1\11\1\105\13\0\1\75\15\0\2\11\47\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\2\10"+
    "\1\106\1\10\1\107\17\10\1\0\3\10\23\0\15\10"+
    "\24\110\1\111\1\112\70\110\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\1\10\1\113\2\10"+
    "\1\114\17\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\5\10"+
    "\1\115\1\116\7\10\1\117\5\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\10\10\1\120\13\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\4\10\1\121\10\10\1\122\6\10\1\0"+
    "\3\10\23\0\15\10\7\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\2\10\1\123\21\10\1\0"+
    "\3\10\23\0\15\10\7\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\4\10\1\124\4\10\1\125"+
    "\12\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\7\10\1\126"+
    "\1\127\1\130\2\10\1\131\7\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\2\10\1\132\21\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\1\0\1\102\1\10\1\0\1\10"+
    "\1\102\3\10\1\133\1\10\2\0\5\10\1\134\7\10"+
    "\1\135\6\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\1\10"+
    "\1\136\22\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\1\10"+
    "\1\137\2\10\1\140\4\10\1\141\3\10\1\142\6\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\5\10\1\143\1\144"+
    "\4\10\1\145\10\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\17\10\1\146\4\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\1\10\1\147\22\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\10\10\1\150\13\10\1\0\3\10\23\0\15\10\30\0"+
    "\1\151\1\0\1\152\1\0\1\153\1\154\1\155\3\0"+
    "\1\156\1\0\1\157\127\0\1\160\1\161\115\0\1\162"+
    "\115\0\1\163\1\164\114\0\1\165\115\0\1\166\2\0"+
    "\1\167\112\0\1\170\3\0\1\171\111\0\1\172\115\0"+
    "\1\173\115\0\1\174\115\0\1\175\45\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\1\10\1\176\13\10\5\0\1\177\3\67"+
    "\2\0\3\67\1\0\5\67\2\0\24\67\1\0\3\67"+
    "\23\0\15\67\1\70\2\0\113\70\10\0\1\74\2\0"+
    "\1\74\1\0\1\75\1\0\1\74\1\0\1\74\14\0"+
    "\1\75\15\0\2\74\50\0\1\200\1\0\1\102\3\0"+
    "\1\102\1\200\1\0\1\200\32\0\2\200\50\0\1\200"+
    "\6\0\1\200\1\0\1\200\32\0\2\200\53\0\1\104"+
    "\3\0\1\104\1\0\1\104\104\0\1\105\2\0\1\105"+
    "\1\0\1\105\1\0\3\105\1\0\1\105\3\0\1\105"+
    "\1\0\1\105\4\0\1\105\2\0\1\105\6\0\1\105"+
    "\3\0\2\105\35\0\1\105\1\0\1\105\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\10\10"+
    "\1\201\13\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\4\10"+
    "\1\202\17\10\1\0\3\10\23\0\15\10\1\110\2\0"+
    "\113\110\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\2\10\1\203\21\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\14\10\1\204\7\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\22\10\1\205\1\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\6\10\1\206\15\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\1\10\1\207\22\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\7\10\1\210\14\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\5\10\1\211\16\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\1\10\1\212\22\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\7\10\1\213\14\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\15\10\1\214\6\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\1\10\1\215\22\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\7\10\1\216\5\10\1\217\6\10\1\0"+
    "\3\10\23\0\15\10\7\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\21\10\1\220\2\10\1\0"+
    "\3\10\23\0\15\10\7\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\23\10\1\221\1\0\3\10"+
    "\23\0\15\10\7\0\2\10\2\0\1\10\1\0\1\10"+
    "\1\0\5\10\2\0\11\10\1\222\12\10\1\0\3\10"+
    "\23\0\15\10\7\0\2\10\2\0\1\10\1\0\1\10"+
    "\1\0\5\10\2\0\7\10\1\223\14\10\1\0\3\10"+
    "\23\0\15\10\7\0\2\10\2\0\1\10\1\0\1\10"+
    "\1\0\5\10\2\0\11\10\1\224\12\10\1\0\3\10"+
    "\23\0\15\10\7\0\2\10\2\0\1\10\1\0\1\10"+
    "\1\0\5\10\2\0\6\10\1\225\5\10\1\226\7\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\7\10\1\227\14\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\15\10\1\230\6\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\2\10\1\231\21\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\5\10\1\232\16\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\4\10\1\233\17\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\7\10\1\234\14\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\14\10\1\235\7\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\6\10\1\236\15\10"+
    "\1\0\3\10\23\0\15\10\7\0\2\10\2\0\1\10"+
    "\1\0\1\10\1\0\5\10\2\0\7\10\1\237\14\10"+
    "\1\0\3\10\23\0\15\10\47\0\1\240\101\0\1\241"+
    "\117\0\1\242\112\0\1\243\105\0\1\244\124\0\1\245"+
    "\113\0\1\246\145\0\1\247\115\0\1\250\45\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\24\10"+
    "\1\0\3\10\23\0\2\10\1\251\12\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\1\10"+
    "\1\252\22\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\15\10"+
    "\1\253\6\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\22\10"+
    "\1\254\1\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\10\10"+
    "\1\255\13\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\14\10"+
    "\1\256\7\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\11\10"+
    "\1\257\12\10\1\0\3\10\23\0\15\10\7\0\2\10"+
    "\2\0\1\10\1\0\1\10\1\0\5\10\2\0\6\10"+
    "\1\260\1\261\14\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\6\10\1\262\15\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\15\10\1\263\6\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\7\10\1\264\14\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\13\10\1\265\10\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\10\10\1\266\13\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\5\10\1\267\16\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\10\10\1\270\13\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\10\10\1\271\13\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\12\10\1\272\11\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\10\10\1\273\13\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\13\10\1\274\10\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\3\10\1\275\20\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\6\10\1\276\15\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\3\10\1\277\20\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\1\10\1\300\22\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\15\10\1\301\6\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\6\10\1\302\15\10\1\0\3\10\23\0\15\10\31\0"+
    "\1\303\114\0\1\304\114\0\1\305\120\0\1\306\132\0"+
    "\1\307\100\0\1\310\113\0\1\311\74\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\3\10\1\312\11\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\20\10\1\313"+
    "\3\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\2\10\1\314"+
    "\21\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\7\10\1\315"+
    "\14\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\2\10\1\316"+
    "\21\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\7\10\1\317"+
    "\14\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\14\10\1\320"+
    "\7\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\6\10\1\321"+
    "\15\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\14\10\1\322"+
    "\7\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\2\10\1\323"+
    "\21\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\1\10\1\324"+
    "\22\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\5\10\1\325"+
    "\16\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\17\10\1\326"+
    "\4\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\10\10\1\327"+
    "\13\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\7\10\1\330"+
    "\14\10\1\0\3\10\23\0\15\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\10\10\1\331"+
    "\13\10\1\0\3\10\23\0\15\10\36\0\1\332\114\0"+
    "\1\333\123\0\1\334\104\0\1\335\116\0\1\336\115\0"+
    "\1\337\71\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\24\10\1\0\3\10\23\0\4\10\1\340"+
    "\10\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\21\10\1\341\2\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\7\10\1\342\14\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\5\10\1\343\16\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\5\10\1\344\16\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\345\1\0\1\10\1\0"+
    "\5\10\2\0\24\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\3\10\1\346\20\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\15\10\1\347\6\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\22\10\1\350\1\10\1\0\3\10\23\0\15\10\27\0"+
    "\1\351\130\0\1\352\103\0\1\353\127\0\1\354\62\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\2\10\1\355\12\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\4\10\1\356\17\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\11\10\1\357\12\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\5\10\1\360\16\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\6\10\1\361\15\10\1\0\3\10\23\0\15\10\50\0"+
    "\1\362\76\0\1\363\121\0\1\364\113\0\1\365\71\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\4\10\1\366\10\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\14\10\1\367\7\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\10\10\1\370\13\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\1\10\1\371\22\10\1\0\3\10\23\0\15\10\53\0"+
    "\1\372\55\0\1\373\115\0\1\374\153\0\1\375\53\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\5\10\1\376\7\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\5\10\1\377\16\10\1\0\3\10\23\0\15\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\12\10\1\u0100\11\10\1\0\3\10\23\0\15\10\37\0"+
    "\1\u0101\106\0\1\u0102\1\u0103\1\0\1\u0104\1\u0105\1\0"+
    "\1\u0106\1\0\1\u0107\1\u0108\5\0\1\u0109\1\u010a\1\u010b"+
    "\57\0\1\u010c\111\0\2\10\2\0\1\10\1\0\1\u010d"+
    "\1\0\5\10\2\0\24\10\1\0\3\10\23\0\15\10"+
    "\7\0\2\10\2\0\1\10\1\0\1\10\1\0\5\10"+
    "\2\0\7\10\1\u010e\14\10\1\0\3\10\23\0\15\10"+
    "\7\0\2\10\2\0\1\10\1\0\1\10\1\0\5\10"+
    "\2\0\10\10\1\u010f\13\10\1\0\3\10\23\0\15\10"+
    "\33\0\1\u0110\111\0\1\u0111\115\0\1\u0112\2\0\1\u0113"+
    "\115\0\1\u0114\122\0\1\u0115\100\0\1\u0116\10\0\1\u0117"+
    "\121\0\1\u0118\120\0\1\u0119\1\u011a\115\0\1\u011b\114\0"+
    "\1\u011c\103\0\1\u011d\12\0\1\u011e\114\0\1\u011f\62\0"+
    "\2\10\2\0\1\u0120\1\0\1\10\1\0\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\15\10\43\0\1\u0121\105\0"+
    "\1\u0122\117\0\1\u0123\123\0\1\u0124\122\0\1\u0125\65\0"+
    "\1\u0126\144\0\1\u0127\105\0\1\u0128\121\0\1\u0129\115\0"+
    "\1\u012a\101\0\1\u012b\115\0\1\u012c\116\0\1\u012d\117\0"+
    "\1\u012e\115\0\1\u012f\134\0\1\u0130\53\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\6\10\1\u0131\3\10\1\u0132\2\10\32\0"+
    "\1\u0133\134\0\1\u0134\102\0\1\u0135\111\0\1\u0136\121\0"+
    "\1\u0137\130\0\1\u0138\57\0\1\u0139\142\0\1\u013a\112\0"+
    "\1\u013b\116\0\1\u013c\130\0\1\u013d\75\0\1\u013e\123\0"+
    "\1\u013f\76\0\1\u0140\130\0\1\u0141\71\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\4\10\1\u0142\10\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\11\10\1\u0143\3\10\27\0\1\u0144\124\0"+
    "\1\u0145\130\0\1\u0146\74\0\1\u0147\100\0\1\u0148\132\0"+
    "\1\u0149\123\0\1\u014a\121\0\1\u014b\107\0\1\u014c\117\0"+
    "\1\u014d\126\0\1\u014e\75\0\1\u014f\120\0\1\u0150\72\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\5\10\1\u0151\7\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\1\10\1\u0152\13\10\50\0"+
    "\1\u0153\77\0\1\u0154\76\0\1\u0155\151\0\1\u0156\100\0"+
    "\1\u0157\112\0\1\u0158\131\0\1\u0159\65\0\1\u015a\147\0"+
    "\1\u015b\113\0\1\u015c\102\0\1\u015d\74\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\7\10\1\u015e\5\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\14\10\1\u015f\30\0\1\u0160\120\0\1\u0161"+
    "\111\0\1\u0162\125\0\1\u0163\112\0\1\u0164\123\0\1\u0165"+
    "\102\0\1\u0166\24\0\1\u0167\1\u0168\72\0\1\u0169\76\0"+
    "\1\u016a\140\0\1\u016b\66\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\2\10\1\u016c\12\10\7\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\2\10\1\u016d\12\10\53\0\1\u016e\74\0\1\u016f\120\0"+
    "\1\u0170\127\0\1\u0171\110\0\1\u0172\106\0\1\u0173\110\0"+
    "\1\u0174\137\0\1\u0175\115\0\1\u0176\110\0\1\u0177\113\0"+
    "\1\u0178\6\0\1\u0179\54\0\2\10\2\0\1\10\1\0"+
    "\1\u017a\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\u017b\1\0"+
    "\5\10\2\0\24\10\1\0\3\10\23\0\15\10\13\0"+
    "\1\u017c\147\0\1\u017d\103\0\1\u017e\120\0\1\u017f\111\0"+
    "\1\u0180\76\0\1\u0181\115\0\1\u0182\152\0\1\u0183\107\0"+
    "\1\u0184\115\0\1\u0185\62\0\2\10\2\0\1\u0186\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\u0187\1\0\1\10\1\0"+
    "\5\10\2\0\24\10\1\0\3\10\23\0\15\10\27\0"+
    "\1\u0188\137\0\1\u0189\106\0\1\u018a\103\0\1\u018b\2\0"+
    "\1\u018c\13\0\1\u018d\76\0\1\u018e\2\0\1\u018f\13\0"+
    "\1\u0190\104\0\1\u0191\122\0\1\u0192\102\0\1\u0193\74\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\10\10\1\u0194\4\10\7\0"+
    "\2\10\2\0\1\10\1\0\1\10\1\0\5\10\2\0"+
    "\24\10\1\0\3\10\23\0\10\10\1\u0195\4\10\43\0"+
    "\1\u0196\122\0\1\u0197\103\0\1\u0198\106\0\1\u0199\133\0"+
    "\1\u019a\106\0\1\u019b\106\0\1\u019c\133\0\1\u019d\100\0"+
    "\1\u019e\123\0\1\u019f\66\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\1\10\1\u01a0\13\10\7\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\1\10\1\u01a1\13\10\47\0\1\u01a2\75\0\1\u01a3\121\0"+
    "\1\u01a4\110\0\1\u01a5\142\0\1\u01a6\75\0\1\u01a7\110\0"+
    "\1\u01a8\142\0\1\u01a9\51\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\11\10\1\u01aa\3\10\7\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\11\10\1\u01ab\3\10\45\0\1\u01ac\103\0\1\u01ad\132\0"+
    "\1\u01ae\107\0\1\u01af\107\0\1\u01b0\131\0\1\u01b1\107\0"+
    "\1\u01b2\107\0\1\u01b3\70\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\3\10\1\u01b4\11\10\7\0\2\10\2\0\1\10\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\3\10\1\u01b5\11\10\27\0\1\u01b6\117\0\1\u01b7\122\0"+
    "\1\u01b8\130\0\1\u01b9\106\0\1\u01ba\111\0\1\u01bb\130\0"+
    "\1\u01bc\106\0\1\u01bd\62\0\2\10\2\0\1\10\1\0"+
    "\1\u01be\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\15\10\7\0\2\10\2\0\1\10\1\0\1\u01bf\1\0"+
    "\5\10\2\0\24\10\1\0\3\10\23\0\15\10\36\0"+
    "\1\u01c0\107\0\1\u01c1\114\0\1\u01c2\117\0\1\u01c3\114\0"+
    "\1\u01c4\114\0\1\u01c5\117\0\1\u01c6\73\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\12\10\1\u01c7\2\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\12\10\1\u01c8\2\10\35\0\1\u01c9\114\0"+
    "\1\u01ca\116\0\1\u01cb\114\0\1\u01cc\70\0\2\10\2\0"+
    "\1\u01cd\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\15\10\7\0\2\10\2\0\1\u01ce\1\0"+
    "\1\10\1\0\5\10\2\0\24\10\1\0\3\10\23\0"+
    "\15\10\42\0\1\u01cf\115\0\1\u01d0\62\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\6\10\1\u01d1\6\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\6\10\1\u01d2\6\10\32\0\1\u01d3\115\0"+
    "\1\u01d4\72\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\24\10\1\0\3\10\23\0\3\10\1\u01d5"+
    "\11\10\7\0\2\10\2\0\1\10\1\0\1\10\1\0"+
    "\5\10\2\0\24\10\1\0\3\10\23\0\3\10\1\u01d6"+
    "\11\10\33\0\1\u01d7\115\0\1\u01d8\71\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\13\10\1\u01d9\1\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\13\10\1\u01da\1\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\4\10\1\u01db\10\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\4\10\1\u01dc\10\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\5\10\1\u01dd\7\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\5\10\1\u01de\7\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\7\10\1\u01df\5\10\7\0\2\10\2\0"+
    "\1\10\1\0\1\10\1\0\5\10\2\0\24\10\1\0"+
    "\3\10\23\0\7\10\1\u01e0\5\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29562];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\11\44\1\1\11\4\1\10\11\2\1\1\0"+
    "\1\11\1\0\1\11\1\1\1\0\2\11\1\1\1\11"+
    "\1\0\1\11\4\1\2\0\1\11\36\1\7\0\1\1"+
    "\3\11\1\1\11\11\1\1\1\11\40\1\7\0\2\11"+
    "\32\1\1\11\6\0\20\1\2\0\1\11\1\0\1\11"+
    "\1\0\11\1\4\0\5\1\2\0\1\1\1\0\4\1"+
    "\1\11\3\0\3\1\14\0\3\1\20\0\1\1\14\0"+
    "\1\11\3\0\2\1\7\0\1\11\1\0\1\11\5\0"+
    "\2\1\1\0\1\11\6\0\1\1\1\0\1\11\2\0"+
    "\2\1\1\11\12\0\2\1\13\0\1\11\2\1\1\11"+
    "\2\0\1\11\10\0\2\1\1\0\1\11\1\0\1\11"+
    "\6\0\2\1\1\0\1\11\11\0\1\11\2\1\10\0"+
    "\2\11\2\1\10\0\2\1\10\0\2\1\1\11\7\0"+
    "\2\1\2\11\2\0\1\11\2\0\2\1\1\0\1\11"+
    "\1\0\1\11\2\1\2\0\2\1\2\0\2\1\2\11"+
    "\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GDScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GDScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return REAL_NUMBER;
            } 
            // fall through
          case 127: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 128: break;
          case 3: 
            { return LINE_BREAK;
            } 
            // fall through
          case 129: break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 130: break;
          case 5: 
            { return NODE_PATH;
            } 
            // fall through
          case 131: break;
          case 6: 
            { return SLASH;
            } 
            // fall through
          case 132: break;
          case 7: 
            { return IDENTIFIER;
            } 
            // fall through
          case 133: break;
          case 8: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 134: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 135: break;
          case 10: 
            { return UNDERSCORE;
            } 
            // fall through
          case 136: break;
          case 11: 
            { return DOT;
            } 
            // fall through
          case 137: break;
          case 12: 
            { return PLUS;
            } 
            // fall through
          case 138: break;
          case 13: 
            { return LESS;
            } 
            // fall through
          case 139: break;
          case 14: 
            { return EQUAL;
            } 
            // fall through
          case 140: break;
          case 15: 
            { return GREATER;
            } 
            // fall through
          case 141: break;
          case 16: 
            { return BANG;
            } 
            // fall through
          case 142: break;
          case 17: 
            { return AMPERSAND;
            } 
            // fall through
          case 143: break;
          case 18: 
            { return PIPE;
            } 
            // fall through
          case 144: break;
          case 19: 
            { return TILDE;
            } 
            // fall through
          case 145: break;
          case 20: 
            { return CARET;
            } 
            // fall through
          case 146: break;
          case 21: 
            { return STAR;
            } 
            // fall through
          case 147: break;
          case 22: 
            { return PERCENT;
            } 
            // fall through
          case 148: break;
          case 23: 
            { return COLON;
            } 
            // fall through
          case 149: break;
          case 24: 
            { return L_BRACKET;
            } 
            // fall through
          case 150: break;
          case 25: 
            { return R_BRACKET;
            } 
            // fall through
          case 151: break;
          case 26: 
            { return L_BRACE;
            } 
            // fall through
          case 152: break;
          case 27: 
            { return R_BRACE;
            } 
            // fall through
          case 153: break;
          case 28: 
            { return L_PAREN;
            } 
            // fall through
          case 154: break;
          case 29: 
            { return R_PAREN;
            } 
            // fall through
          case 155: break;
          case 30: 
            { return COMMA;
            } 
            // fall through
          case 156: break;
          case 31: 
            { return SEMICOLON;
            } 
            // fall through
          case 157: break;
          case 32: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 158: break;
          case 33: 
            { return SLASH_EQUAL;
            } 
            // fall through
          case 159: break;
          case 34: 
            { return MINUS_EQUAL;
            } 
            // fall through
          case 160: break;
          case 35: 
            { return ARROW;
            } 
            // fall through
          case 161: break;
          case 36: 
            { return DOT_DOT;
            } 
            // fall through
          case 162: break;
          case 37: 
            { return PLUS_EQUAL;
            } 
            // fall through
          case 163: break;
          case 38: 
            { return BINARY_NUMBER;
            } 
            // fall through
          case 164: break;
          case 39: 
            { return HEXADECIMAL_NUMBER;
            } 
            // fall through
          case 165: break;
          case 40: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 166: break;
          case 41: 
            { return AS;
            } 
            // fall through
          case 167: break;
          case 42: 
            { return OR;
            } 
            // fall through
          case 168: break;
          case 43: 
            { return IN;
            } 
            // fall through
          case 169: break;
          case 44: 
            { return IS;
            } 
            // fall through
          case 170: break;
          case 45: 
            { return IF;
            } 
            // fall through
          case 171: break;
          case 46: 
            { return LESS_LESS;
            } 
            // fall through
          case 172: break;
          case 47: 
            { return LESS_EQUAL;
            } 
            // fall through
          case 173: break;
          case 48: 
            { return EQUAL_EQUAL;
            } 
            // fall through
          case 174: break;
          case 49: 
            { return GREATER_EQUAL;
            } 
            // fall through
          case 175: break;
          case 50: 
            { return GREATER_GREATER;
            } 
            // fall through
          case 176: break;
          case 51: 
            { return BANG_EQUAL;
            } 
            // fall through
          case 177: break;
          case 52: 
            { return AMPERSAND_EQUAL;
            } 
            // fall through
          case 178: break;
          case 53: 
            { return AMPERSAND_AMPERSAND;
            } 
            // fall through
          case 179: break;
          case 54: 
            { return PIPE_EQUAL;
            } 
            // fall through
          case 180: break;
          case 55: 
            { return PIPE_PIPE;
            } 
            // fall through
          case 181: break;
          case 56: 
            { return CARET_EQUAL;
            } 
            // fall through
          case 182: break;
          case 57: 
            { return STAR_EQUAL;
            } 
            // fall through
          case 183: break;
          case 58: 
            { return PERCENT_EQUAL;
            } 
            // fall through
          case 184: break;
          case 59: 
            { return INFER;
            } 
            // fall through
          case 185: break;
          case 60: 
            { return VAR;
            } 
            // fall through
          case 186: break;
          case 61: 
            { return AND;
            } 
            // fall through
          case 187: break;
          case 62: 
            { return NOT;
            } 
            // fall through
          case 188: break;
          case 63: 
            { return SET;
            } 
            // fall through
          case 189: break;
          case 64: 
            { return FOR;
            } 
            // fall through
          case 190: break;
          case 65: 
            { return INT;
            } 
            // fall through
          case 191: break;
          case 66: 
            { return GET;
            } 
            // fall through
          case 192: break;
          case 67: 
            { return LESS_LESS_EQUAL;
            } 
            // fall through
          case 193: break;
          case 68: 
            { return GREATER_GREATER_EQUAL;
            } 
            // fall through
          case 194: break;
          case 69: 
            { return BOOL;
            } 
            // fall through
          case 195: break;
          case 70: 
            { return VOID;
            } 
            // fall through
          case 196: break;
          case 71: 
            { return NULL;
            } 
            // fall through
          case 197: break;
          case 72: 
            { return SELF;
            } 
            // fall through
          case 198: break;
          case 73: 
            { return TRUE;
            } 
            // fall through
          case 199: break;
          case 74: 
            { return ENUM;
            } 
            // fall through
          case 200: break;
          case 75: 
            { return ELSE;
            } 
            // fall through
          case 201: break;
          case 76: 
            { return ELIF;
            } 
            // fall through
          case 202: break;
          case 77: 
            { return FUNC;
            } 
            // fall through
          case 203: break;
          case 78: 
            { return PASS;
            } 
            // fall through
          case 204: break;
          case 79: 
            { return AT_RPC;
            } 
            // fall through
          case 205: break;
          case 80: 
            { return BREAK;
            } 
            // fall through
          case 206: break;
          case 81: 
            { return AWAIT;
            } 
            // fall through
          case 207: break;
          case 82: 
            { return CONST;
            } 
            // fall through
          case 208: break;
          case 83: 
            { return CLASS;
            } 
            // fall through
          case 209: break;
          case 84: 
            { return SUPER;
            } 
            // fall through
          case 210: break;
          case 85: 
            { return MATCH;
            } 
            // fall through
          case 211: break;
          case 86: 
            { return FALSE;
            } 
            // fall through
          case 212: break;
          case 87: 
            { return FLOAT;
            } 
            // fall through
          case 213: break;
          case 88: 
            { return WHILE;
            } 
            // fall through
          case 214: break;
          case 89: 
            { return AT_TOOL;
            } 
            // fall through
          case 215: break;
          case 90: 
            { return AT_ICON;
            } 
            // fall through
          case 216: break;
          case 91: 
            { return ASSERT;
            } 
            // fall through
          case 217: break;
          case 92: 
            { return RETURN;
            } 
            // fall through
          case 218: break;
          case 93: 
            { return STATIC;
            } 
            // fall through
          case 219: break;
          case 94: 
            { return SIGNAL;
            } 
            // fall through
          case 220: break;
          case 95: 
            { return EXTENDS;
            } 
            // fall through
          case 221: break;
          case 96: 
            { return AT_EXPORT;
            } 
            // fall through
          case 222: break;
          case 97: 
            { return CONTINUE;
            } 
            // fall through
          case 223: break;
          case 98: 
            { return AT_ONREADY;
            } 
            // fall through
          case 224: break;
          case 99: 
            { return BREAKPOINT;
            } 
            // fall through
          case 225: break;
          case 100: 
            { return CLASS_NAME;
            } 
            // fall through
          case 226: break;
          case 101: 
            { return AT_EXPORT_DIR;
            } 
            // fall through
          case 227: break;
          case 102: 
            { return AT_EXPORT_ENUM;
            } 
            // fall through
          case 228: break;
          case 103: 
            { return AT_EXPORT_FILE;
            } 
            // fall through
          case 229: break;
          case 104: 
            { return AT_EXPORT_RANGE;
            } 
            // fall through
          case 230: break;
          case 105: 
            { return AT_EXPORT_FLAGS;
            } 
            // fall through
          case 231: break;
          case 106: 
            { return AT_EXPORT_GROUP;
            } 
            // fall through
          case 232: break;
          case 107: 
            { return AT_STATIC_UNLOAD;
            } 
            // fall through
          case 233: break;
          case 108: 
            { return AT_WARNING_IGNORE;
            } 
            // fall through
          case 234: break;
          case 109: 
            { return AT_EXPORT_CATEGORY;
            } 
            // fall through
          case 235: break;
          case 110: 
            { return AT_EXPORT_SUBGROUP;
            } 
            // fall through
          case 236: break;
          case 111: 
            { return AT_EXPORT_NODE_PATH;
            } 
            // fall through
          case 237: break;
          case 112: 
            { return AT_EXPORT_MULTILINE;
            } 
            // fall through
          case 238: break;
          case 113: 
            { return AT_EXPORT_EXP_EASING;
            } 
            // fall through
          case 239: break;
          case 114: 
            { return AT_EXPORT_GLOBAL_DIR;
            } 
            // fall through
          case 240: break;
          case 115: 
            { return AT_EXPORT_PLACEHOLDER;
            } 
            // fall through
          case 241: break;
          case 116: 
            { return AT_EXPORT_GLOBAL_FILE;
            } 
            // fall through
          case 242: break;
          case 117: 
            { return AT_EXPORT_COLOR_NO_ALPHA;
            } 
            // fall through
          case 243: break;
          case 118: 
            { return AT_EXPORT_FLAGS_AVOIDANCE;
            } 
            // fall through
          case 244: break;
          case 119: 
            { return AT_EXPORT_FLAGS_2D_RENDER;
            } 
            // fall through
          case 245: break;
          case 120: 
            { return AT_EXPORT_FLAGS_3D_RENDER;
            } 
            // fall through
          case 246: break;
          case 121: 
            { return AT_EXPORT_FLAGS_2D_PHYSICS;
            } 
            // fall through
          case 247: break;
          case 122: 
            { return AT_EXPORT_FLAGS_3D_PHYSICS;
            } 
            // fall through
          case 248: break;
          case 123: 
            { return AT_EXPORT_FLAGS_2D_NAVIGATION;
            } 
            // fall through
          case 249: break;
          case 124: 
            { return AT_EXPORT_FLAGS_3D_NAVIGATION;
            } 
            // fall through
          case 250: break;
          case 125: 
            { return MULTILINE_SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 251: break;
          case 126: 
            { return MULTILINE_DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 252: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
