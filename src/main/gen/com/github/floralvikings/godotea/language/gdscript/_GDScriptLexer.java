// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _GDScriptLexer.flex

package com.github.floralvikings.godotea.language.gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.floralvikings.godotea.language.gdscript.psi.GDScriptTypes.*;


public class _GDScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\6\27\1\30\1\31\1\32\1\33\1\34\1\0"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\36\1\43"+
    "\1\44\1\45\2\44\1\46\1\47\1\50\1\51\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\3\44\1\57\1\44"+
    "\1\60\1\61\1\62\1\63\1\64\1\0\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\44"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\44\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\44"+
    "\1\114\1\115\1\116\1\117\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\22\1\23\1\24\1\25"+
    "\1\26\1\2\4\27\1\30\1\31\1\32\1\33\21\27"+
    "\1\34\1\35\1\36\1\37\1\40\1\0\1\41\1\0"+
    "\1\7\1\42\1\43\1\44\1\0\1\45\1\0\1\46"+
    "\1\47\1\1\1\50\1\51\1\0\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\10\0"+
    "\2\27\1\64\2\27\1\65\15\27\1\66\1\67\1\70"+
    "\3\27\1\71\15\27\1\72\1\73\1\7\1\1\1\74"+
    "\1\75\10\0\2\27\1\76\14\27\1\77\1\27\1\100"+
    "\1\101\2\27\1\102\6\27\1\103\5\27\1\104\3\27"+
    "\6\0\1\105\1\0\1\27\1\106\2\27\1\107\4\27"+
    "\1\110\1\111\1\112\3\27\1\113\2\27\1\114\1\115"+
    "\3\27\1\116\4\27\1\117\1\120\1\121\2\27\1\0"+
    "\1\122\4\0\1\123\2\27\1\124\1\125\1\126\1\127"+
    "\2\27\1\130\1\131\1\27\1\132\6\27\1\133\1\134"+
    "\1\135\5\0\1\27\1\136\4\27\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\1\0\1\150"+
    "\1\151\4\27\1\152\3\27\2\0\1\153\2\0\3\27"+
    "\1\154\3\27\14\0\6\27\16\0\1\27\1\155\1\156"+
    "\1\157\1\160\1\161\1\0\1\162\11\0\1\163\1\164"+
    "\1\165\2\27\1\0\1\166\1\0\1\167\6\0\2\27"+
    "\2\0\1\170\4\0\1\171\2\27\7\0\2\27\10\0"+
    "\2\27\11\0\2\27\6\0\1\172\1\173\1\0\2\27"+
    "\1\0\1\174\6\0\1\175\2\0\2\27\7\0\1\176"+
    "\1\177\2\27\7\0\2\27\7\0\2\27\1\200\6\0"+
    "\2\27\2\0\1\201\2\0\1\202\2\27\1\0\1\203"+
    "\1\0\1\204\2\27\2\0\2\27\2\0\2\27\1\205"+
    "\1\206\6\27\1\207\1\210";

  private static int [] zzUnpackAction() {
    int [] result = new int[494];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\120\0\120\0\240\0\360\0\u0140\0\u0190"+
    "\0\u01e0\0\u0230\0\u0280\0\120\0\120\0\u02d0\0\u0320\0\120"+
    "\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0\0\u0500\0\120\0\u0550"+
    "\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730\0\u0780\0\120"+
    "\0\120\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910\0\u0960\0\u09b0"+
    "\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u0c30"+
    "\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\120\0\u0dc0\0\120\0\120"+
    "\0\120\0\360\0\120\0\u0e10\0\u0e60\0\120\0\120\0\120"+
    "\0\u0280\0\120\0\u0eb0\0\120\0\120\0\u0f00\0\120\0\120"+
    "\0\u0f50\0\120\0\120\0\u0fa0\0\u0ff0\0\120\0\u1040\0\120"+
    "\0\120\0\120\0\u1090\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u1220"+
    "\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0\0\120\0\u0820\0\u1400"+
    "\0\u1450\0\u14a0\0\u14f0\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680"+
    "\0\u16d0\0\u1720\0\u1770\0\u17c0\0\u1810\0\u1860\0\u0690\0\u18b0"+
    "\0\u0690\0\u1900\0\u1950\0\u19a0\0\u0690\0\u19f0\0\u1a40\0\u1a90"+
    "\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0\0\u1c20\0\u1c70\0\u1cc0\0\u1d10"+
    "\0\u1d60\0\u1db0\0\120\0\120\0\120\0\u1310\0\120\0\120"+
    "\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0\0\u2030"+
    "\0\u2080\0\u20d0\0\u0690\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260"+
    "\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u0690"+
    "\0\u24e0\0\u0690\0\u0690\0\u2530\0\u2580\0\u0690\0\u25d0\0\u2620"+
    "\0\u2670\0\u26c0\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0"+
    "\0\u28f0\0\u2940\0\u0690\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u2ad0"+
    "\0\u2b20\0\u2b70\0\u2bc0\0\u2c10\0\120\0\u2c60\0\u2cb0\0\u0690"+
    "\0\u2d00\0\u2d50\0\u0690\0\u2da0\0\u2df0\0\u2e40\0\u2e90\0\u0690"+
    "\0\u0690\0\u0690\0\u2ee0\0\u2f30\0\u2f80\0\u0690\0\u2fd0\0\u3020"+
    "\0\u0690\0\u0690\0\u3070\0\u30c0\0\u3110\0\u0690\0\u3160\0\u31b0"+
    "\0\u3200\0\u3250\0\u0690\0\u0690\0\u0690\0\u32a0\0\u32f0\0\u3340"+
    "\0\120\0\u3390\0\u33e0\0\u3430\0\u3480\0\120\0\u34d0\0\u3520"+
    "\0\u0690\0\u3570\0\u35c0\0\u0690\0\u3610\0\u3660\0\u0690\0\u0690"+
    "\0\u36b0\0\u0690\0\u3700\0\u3750\0\u37a0\0\u37f0\0\u3840\0\u3890"+
    "\0\u0690\0\u0690\0\u0690\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20"+
    "\0\u3a70\0\u0690\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50"+
    "\0\u3ca0\0\u0690\0\u0690\0\u0690\0\u0690\0\u3cf0\0\u3d40\0\u3d90"+
    "\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20\0\u3f70\0\u0690\0\u3fc0"+
    "\0\u4010\0\u4060\0\u40b0\0\u4100\0\120\0\u4150\0\u41a0\0\u41f0"+
    "\0\u4240\0\u4290\0\u0690\0\u42e0\0\u4330\0\u4380\0\u43d0\0\u4420"+
    "\0\u4470\0\u44c0\0\u4510\0\u4560\0\u45b0\0\u4600\0\u4650\0\u46a0"+
    "\0\u46f0\0\u4740\0\u4790\0\u47e0\0\u4830\0\u4880\0\u48d0\0\u4920"+
    "\0\u4970\0\u49c0\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0"+
    "\0\u4bf0\0\u4c40\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0\0\u0690"+
    "\0\u0690\0\u0690\0\u0690\0\u0690\0\u4e20\0\120\0\u4e70\0\u4ec0"+
    "\0\u4f10\0\u4f60\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u50f0\0\120"+
    "\0\120\0\120\0\u5140\0\u5190\0\u51e0\0\120\0\u5230\0\120"+
    "\0\u5280\0\u52d0\0\u5320\0\u5370\0\u53c0\0\u5410\0\u5460\0\u54b0"+
    "\0\u5500\0\u5550\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0\0\120"+
    "\0\u5730\0\u5780\0\u57d0\0\u5820\0\u5870\0\u58c0\0\u5910\0\u5960"+
    "\0\u59b0\0\u5a00\0\u5a50\0\u5aa0\0\u5af0\0\u5b40\0\u5b90\0\u5be0"+
    "\0\u5c30\0\u5c80\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5e10\0\u5e60"+
    "\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0\0\u6040\0\u6090\0\u60e0"+
    "\0\u6130\0\u6180\0\u61d0\0\u6220\0\u6270\0\u62c0\0\120\0\120"+
    "\0\u6310\0\u6360\0\u63b0\0\u6400\0\120\0\u6450\0\u64a0\0\u64f0"+
    "\0\u6540\0\u6590\0\u65e0\0\120\0\u6630\0\u6680\0\u66d0\0\u6720"+
    "\0\u6770\0\u67c0\0\u6810\0\u6860\0\u68b0\0\u6900\0\u6950\0\120"+
    "\0\120\0\u69a0\0\u69f0\0\u6a40\0\u6a90\0\u6ae0\0\u6b30\0\u6b80"+
    "\0\u6bd0\0\u6c20\0\u6c70\0\u6cc0\0\u6d10\0\u6d60\0\u6db0\0\u6e00"+
    "\0\u6e50\0\u6ea0\0\u6ef0\0\u6f40\0\u6f90\0\120\0\u6fe0\0\u7030"+
    "\0\u7080\0\u70d0\0\u7120\0\u7170\0\u71c0\0\u7210\0\u7260\0\u72b0"+
    "\0\120\0\u7300\0\u7350\0\120\0\u73a0\0\u73f0\0\u7440\0\120"+
    "\0\u7490\0\120\0\u74e0\0\u7530\0\u7580\0\u75d0\0\u7620\0\u7670"+
    "\0\u76c0\0\u7710\0\u7760\0\u77b0\0\120\0\120\0\u7800\0\u7850"+
    "\0\u78a0\0\u78f0\0\u7940\0\u7990\0\u0690\0\u0690";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[494];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\4\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\4\34\1\35\4\34\1\36\4\34"+
    "\1\37\3\34\1\40\1\2\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\34\1\47\1\50\1\51\1\34\1\52"+
    "\2\34\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\34\1\62\1\63\1\34\1\64\1\65\1\66\1\67"+
    "\1\70\153\0\1\71\64\0\5\72\1\73\53\72\1\74"+
    "\36\72\2\7\1\0\115\7\5\0\1\75\13\0\7\75"+
    "\6\0\22\75\4\0\30\75\37\0\1\76\75\0\1\77"+
    "\21\0\1\100\64\0\12\101\1\102\46\101\1\103\36\101"+
    "\33\0\1\104\117\0\1\105\105\0\1\106\1\0\5\25"+
    "\3\0\1\107\1\110\5\0\1\111\21\0\1\25\4\0"+
    "\1\111\47\0\1\112\1\0\5\106\12\0\1\111\21\0"+
    "\1\106\4\0\1\111\61\0\1\113\105\0\1\106\1\0"+
    "\5\25\12\0\1\111\21\0\1\25\1\0\1\114\2\0"+
    "\1\111\20\0\1\115\26\0\1\106\1\0\5\25\12\0"+
    "\1\111\21\0\1\25\4\0\1\111\61\0\1\116\116\0"+
    "\1\117\1\120\117\0\1\121\117\0\1\122\1\123\154\0"+
    "\1\124\3\0\1\125\2\0\1\126\1\0\1\127\1\130"+
    "\1\131\1\0\1\132\34\0\5\34\6\0\22\34\4\0"+
    "\30\34\22\0\1\133\1\0\1\133\2\0\5\34\6\0"+
    "\22\34\4\0\30\34\27\0\5\34\6\0\20\34\1\134"+
    "\1\34\4\0\30\34\27\0\5\34\6\0\21\34\1\135"+
    "\4\0\30\34\37\0\1\136\105\0\1\106\1\0\5\137"+
    "\6\0\4\34\1\35\15\34\4\0\1\137\4\34\1\35"+
    "\22\34\27\0\5\34\6\0\22\34\4\0\15\34\1\140"+
    "\3\34\1\141\3\34\1\142\2\34\27\0\5\34\6\0"+
    "\22\34\4\0\16\34\1\143\1\34\1\144\7\34\27\0"+
    "\5\34\6\0\22\34\4\0\13\34\1\145\2\34\1\146"+
    "\11\34\22\0\1\133\1\0\1\133\2\0\5\34\6\0"+
    "\22\34\4\0\13\34\1\147\1\34\1\150\10\34\1\151"+
    "\1\34\27\0\5\34\6\0\22\34\4\0\1\34\1\152"+
    "\11\34\1\153\2\34\1\154\4\34\1\155\4\34\27\0"+
    "\5\34\6\0\22\34\4\0\5\34\1\156\22\34\27\0"+
    "\5\34\6\0\22\34\4\0\6\34\1\157\6\34\1\160"+
    "\3\34\1\161\6\34\27\0\5\34\6\0\22\34\4\0"+
    "\1\34\1\162\26\34\27\0\5\34\6\0\22\34\4\0"+
    "\16\34\1\163\4\34\1\164\4\34\27\0\5\34\6\0"+
    "\22\34\4\0\20\34\1\165\7\34\27\0\5\34\6\0"+
    "\22\34\4\0\1\34\1\166\21\34\1\167\4\34\27\0"+
    "\5\34\6\0\22\34\4\0\5\34\1\170\22\34\27\0"+
    "\5\34\6\0\22\34\4\0\5\34\1\171\3\34\1\172"+
    "\10\34\1\173\1\174\4\34\27\0\5\34\6\0\22\34"+
    "\4\0\16\34\1\175\1\34\1\176\7\34\27\0\5\34"+
    "\6\0\22\34\4\0\1\34\1\177\14\34\1\200\11\34"+
    "\27\0\5\34\6\0\22\34\4\0\10\34\1\201\17\34"+
    "\27\0\5\34\6\0\22\34\4\0\11\34\1\202\16\34"+
    "\37\0\1\203\61\0\1\204\2\0\2\72\2\0\114\72"+
    "\5\0\1\205\13\0\7\75\6\0\22\75\4\0\30\75"+
    "\4\0\2\101\2\0\114\101\23\0\5\106\12\0\1\111"+
    "\21\0\1\106\4\0\1\111\44\0\1\133\1\0\1\133"+
    "\2\0\5\206\113\0\2\114\37\0\1\114\56\0\5\115"+
    "\6\0\5\115\21\0\7\115\60\0\1\207\117\0\1\210"+
    "\176\0\1\211\74\0\1\212\115\0\1\213\133\0\1\214"+
    "\125\0\1\215\101\0\1\216\11\0\1\217\116\0\1\220"+
    "\40\0\5\206\113\0\5\34\6\0\10\34\1\221\11\34"+
    "\4\0\30\34\27\0\5\34\6\0\12\34\1\222\7\34"+
    "\4\0\30\34\27\0\5\34\6\0\22\34\4\0\4\34"+
    "\1\223\23\34\27\0\5\34\6\0\22\34\4\0\21\34"+
    "\1\224\6\34\27\0\5\34\6\0\22\34\4\0\1\34"+
    "\1\225\26\34\27\0\5\34\6\0\22\34\4\0\16\34"+
    "\1\226\11\34\27\0\5\34\6\0\22\34\4\0\5\34"+
    "\1\227\22\34\27\0\5\34\6\0\22\34\4\0\1\34"+
    "\1\230\26\34\27\0\5\34\6\0\22\34\4\0\15\34"+
    "\1\231\12\34\27\0\5\34\6\0\22\34\4\0\11\34"+
    "\1\232\7\34\1\233\6\34\27\0\5\34\6\0\22\34"+
    "\4\0\23\34\1\234\4\34\27\0\5\34\6\0\22\34"+
    "\4\0\22\34\1\235\5\34\27\0\5\34\6\0\22\34"+
    "\4\0\13\34\1\236\14\34\27\0\5\34\6\0\22\34"+
    "\4\0\16\34\1\237\11\34\27\0\5\34\6\0\22\34"+
    "\4\0\20\34\1\240\7\34\27\0\5\34\6\0\22\34"+
    "\4\0\15\34\1\241\12\34\27\0\5\34\6\0\22\34"+
    "\4\0\22\34\1\242\5\34\27\0\5\34\6\0\22\34"+
    "\4\0\22\34\1\243\5\34\27\0\5\34\6\0\22\34"+
    "\4\0\21\34\1\244\1\245\5\34\27\0\5\34\6\0"+
    "\22\34\4\0\22\34\1\246\5\34\27\0\5\34\6\0"+
    "\22\34\4\0\13\34\1\247\14\34\27\0\5\34\6\0"+
    "\22\34\4\0\21\34\1\250\6\34\27\0\5\34\6\0"+
    "\22\34\4\0\17\34\1\251\10\34\27\0\5\34\6\0"+
    "\22\34\4\0\14\34\1\252\5\34\1\253\5\34\27\0"+
    "\5\34\6\0\22\34\4\0\13\34\1\254\6\34\1\255"+
    "\5\34\27\0\5\34\6\0\22\34\4\0\7\34\1\256"+
    "\20\34\27\0\5\34\6\0\22\34\4\0\1\34\1\257"+
    "\26\34\27\0\5\34\6\0\22\34\4\0\17\34\1\260"+
    "\10\34\27\0\5\34\6\0\22\34\4\0\16\34\1\261"+
    "\11\34\27\0\5\34\6\0\22\34\4\0\23\34\1\262"+
    "\4\34\27\0\5\34\6\0\22\34\4\0\20\34\1\263"+
    "\7\34\27\0\5\34\6\0\22\34\4\0\11\34\1\264"+
    "\16\34\27\0\5\34\6\0\22\34\4\0\11\34\1\265"+
    "\16\34\27\0\5\34\6\0\22\34\4\0\5\34\1\266"+
    "\22\34\107\0\1\267\116\0\1\270\122\0\1\271\116\0"+
    "\1\272\116\0\1\273\114\0\1\274\106\0\1\275\132\0"+
    "\1\276\40\0\5\34\6\0\17\34\1\277\2\34\4\0"+
    "\30\34\27\0\5\34\6\0\2\34\1\300\17\34\4\0"+
    "\30\34\27\0\5\34\6\0\22\34\4\0\5\34\1\301"+
    "\22\34\27\0\5\34\6\0\22\34\4\0\11\34\1\302"+
    "\16\34\27\0\5\34\6\0\22\34\4\0\13\34\1\303"+
    "\14\34\27\0\5\34\6\0\22\34\4\0\1\34\1\304"+
    "\26\34\27\0\5\34\6\0\22\34\4\0\21\34\1\305"+
    "\6\34\27\0\5\34\6\0\22\34\4\0\21\34\1\306"+
    "\1\307\5\34\27\0\5\34\6\0\22\34\4\0\6\34"+
    "\1\310\21\34\27\0\5\34\6\0\22\34\4\0\5\34"+
    "\1\311\22\34\27\0\5\34\6\0\22\34\4\0\14\34"+
    "\1\312\13\34\27\0\5\34\6\0\22\34\4\0\5\34"+
    "\1\313\22\34\27\0\5\34\6\0\22\34\4\0\21\34"+
    "\1\314\6\34\27\0\5\34\6\0\22\34\4\0\1\34"+
    "\1\315\26\34\27\0\5\34\6\0\22\34\4\0\3\34"+
    "\1\316\24\34\27\0\5\34\6\0\22\34\4\0\22\34"+
    "\1\317\5\34\27\0\5\34\6\0\22\34\4\0\3\34"+
    "\1\320\24\34\27\0\5\34\6\0\22\34\4\0\13\34"+
    "\1\321\14\34\27\0\5\34\6\0\22\34\4\0\21\34"+
    "\1\322\6\34\27\0\5\34\6\0\22\34\4\0\17\34"+
    "\1\323\10\34\27\0\5\34\6\0\22\34\4\0\16\34"+
    "\1\324\11\34\27\0\5\34\6\0\22\34\4\0\23\34"+
    "\1\325\4\34\27\0\5\34\6\0\22\34\4\0\6\34"+
    "\1\326\21\34\27\0\5\34\6\0\22\34\4\0\7\34"+
    "\1\327\20\34\27\0\5\34\6\0\22\34\4\0\15\34"+
    "\1\330\12\34\27\0\5\34\6\0\22\34\4\0\22\34"+
    "\1\331\5\34\27\0\5\34\6\0\22\34\4\0\5\34"+
    "\1\332\22\34\27\0\5\34\6\0\22\34\4\0\13\34"+
    "\1\333\14\34\27\0\5\34\6\0\22\34\4\0\5\34"+
    "\1\334\22\34\27\0\5\34\6\0\22\34\4\0\4\34"+
    "\1\335\23\34\27\0\5\34\6\0\22\34\4\0\13\34"+
    "\1\336\14\34\27\0\5\34\6\0\22\34\4\0\13\34"+
    "\1\337\14\34\106\0\1\340\116\0\1\341\124\0\1\342"+
    "\102\0\1\343\131\0\1\344\116\0\1\345\114\0\1\346"+
    "\43\0\5\34\6\0\7\34\1\347\12\34\4\0\30\34"+
    "\27\0\5\34\6\0\22\34\4\0\20\34\1\350\7\34"+
    "\27\0\5\34\6\0\22\34\4\0\22\34\1\351\5\34"+
    "\27\0\5\34\6\0\22\34\4\0\12\34\1\352\15\34"+
    "\27\0\5\34\6\0\22\34\4\0\21\34\1\353\6\34"+
    "\27\0\5\34\6\0\22\34\4\0\22\34\1\354\5\34"+
    "\27\0\5\34\6\0\22\34\4\0\11\34\1\355\16\34"+
    "\27\0\5\34\6\0\22\34\4\0\15\34\1\356\12\34"+
    "\27\0\5\34\6\0\22\34\4\0\5\34\1\357\22\34"+
    "\27\0\5\34\6\0\22\34\4\0\22\34\1\360\5\34"+
    "\27\0\5\34\6\0\22\34\4\0\5\34\1\361\22\34"+
    "\27\0\5\34\6\0\22\34\4\0\10\34\1\362\17\34"+
    "\27\0\5\34\6\0\22\34\4\0\5\34\1\363\22\34"+
    "\27\0\5\34\6\0\22\34\4\0\22\34\1\364\5\34"+
    "\27\0\5\34\6\0\22\34\4\0\20\34\1\365\7\34"+
    "\27\0\5\34\6\0\22\34\4\0\5\34\1\366\22\34"+
    "\27\0\5\34\6\0\22\34\4\0\1\34\1\367\26\34"+
    "\27\0\5\34\6\0\22\34\4\0\11\34\1\370\16\34"+
    "\27\0\5\34\6\0\22\34\4\0\20\34\1\371\7\34"+
    "\27\0\5\34\6\0\22\34\4\0\5\34\1\372\22\34"+
    "\27\0\5\34\6\0\22\34\4\0\4\34\1\373\23\34"+
    "\110\0\1\374\104\0\1\375\113\0\1\376\123\0\1\377"+
    "\134\0\1\u0100\34\0\5\34\6\0\10\34\1\u0101\11\34"+
    "\4\0\30\34\27\0\5\34\6\0\22\34\4\0\22\34"+
    "\1\u0102\5\34\27\0\5\34\6\0\22\34\4\0\17\34"+
    "\1\u0103\10\34\27\0\5\34\6\0\22\34\4\0\1\u0104"+
    "\27\34\27\0\5\34\6\0\22\34\4\0\15\34\1\u0105"+
    "\12\34\27\0\5\34\6\0\22\34\4\0\4\34\1\u0106"+
    "\23\34\27\0\5\34\6\0\22\34\4\0\20\34\1\u0107"+
    "\7\34\27\0\5\34\6\0\22\34\4\0\22\34\1\u0108"+
    "\5\34\27\0\5\34\6\0\22\34\4\0\5\34\1\u0109"+
    "\22\34\27\0\5\34\6\0\22\34\4\0\15\34\1\u010a"+
    "\12\34\27\0\5\34\6\0\22\34\4\0\22\34\1\u010b"+
    "\5\34\27\0\5\34\6\0\22\34\4\0\13\34\1\u010c"+
    "\14\34\27\0\5\34\6\0\22\34\4\0\3\34\1\u010d"+
    "\24\34\112\0\1\u010e\115\0\1\u010f\103\0\1\u0110\135\0"+
    "\1\u0111\102\0\1\u0112\51\0\5\34\6\0\7\34\1\u0113"+
    "\12\34\4\0\30\34\27\0\5\34\6\0\22\34\4\0"+
    "\16\34\1\u0114\11\34\27\0\5\34\6\0\22\34\4\0"+
    "\15\34\1\u0115\12\34\27\0\5\34\6\0\22\34\4\0"+
    "\23\34\1\u0116\4\34\27\0\5\34\6\0\22\34\4\0"+
    "\21\34\1\u0117\6\34\27\0\5\34\6\0\22\34\4\0"+
    "\21\34\1\u0118\6\34\27\0\5\34\6\0\22\34\4\0"+
    "\21\34\1\u0119\6\34\27\0\5\34\6\0\22\34\4\0"+
    "\21\34\1\u011a\6\34\70\0\1\u011b\140\0\1\u011c\125\0"+
    "\1\u011d\111\0\1\u011e\117\0\1\u011f\35\0\5\34\6\0"+
    "\12\34\1\u0120\7\34\4\0\30\34\27\0\5\34\6\0"+
    "\22\34\4\0\11\34\1\u0121\16\34\27\0\5\34\6\0"+
    "\22\34\4\0\1\34\1\u0122\26\34\27\0\5\34\6\0"+
    "\22\34\4\0\5\34\1\u0123\22\34\27\0\5\34\6\0"+
    "\22\34\4\0\27\34\1\u0124\27\0\5\34\6\0\22\34"+
    "\4\0\27\34\1\u0125\27\0\5\34\6\0\22\34\4\0"+
    "\27\34\1\u0126\73\0\1\u0127\1\u0128\1\u0129\1\u012a\1\u012b"+
    "\4\0\1\u012c\1\u012d\1\0\1\u012e\1\u012f\126\0\1\u0130"+
    "\117\0\1\u0131\117\0\1\u0132\27\0\5\34\6\0\4\34"+
    "\1\u0133\15\34\4\0\30\34\27\0\5\34\6\0\22\34"+
    "\4\0\15\34\1\u0134\12\34\27\0\5\34\6\0\22\34"+
    "\4\0\14\34\1\u0135\13\34\27\0\5\34\6\0\22\34"+
    "\4\0\15\34\1\u0136\12\34\27\0\5\34\6\0\22\34"+
    "\4\0\15\34\1\u0137\12\34\27\0\5\34\6\0\22\34"+
    "\4\0\15\34\1\u0138\12\34\106\0\1\u0139\112\0\1\u013a"+
    "\123\0\1\u013b\10\0\1\u013c\102\0\1\u013d\1\0\1\u013e"+
    "\117\0\1\u013f\127\0\1\u0140\112\0\1\u0141\114\0\1\u0142"+
    "\105\0\1\u0143\133\0\1\u0144\117\0\1\u0145\117\0\1\u0146"+
    "\41\0\5\34\6\0\22\34\4\0\1\u0147\27\34\27\0"+
    "\5\34\6\0\22\34\4\0\22\34\1\u0148\5\34\27\0"+
    "\5\34\6\0\22\34\4\0\5\34\1\u0149\22\34\27\0"+
    "\5\34\6\0\22\34\4\0\3\34\1\u014a\24\34\27\0"+
    "\5\34\6\0\22\34\4\0\3\34\1\u014b\24\34\27\0"+
    "\5\34\6\0\22\34\4\0\3\34\1\u014c\24\34\103\0"+
    "\1\u014d\124\0\1\u014e\122\0\1\u014f\113\0\1\u0150\113\0"+
    "\1\u0151\105\0\1\u0152\134\0\1\u0153\114\0\1\u0154\110\0"+
    "\1\u0155\114\0\1\u0156\133\0\1\u0157\105\0\1\u0158\117\0"+
    "\1\u0159\117\0\1\u015a\53\0\5\34\6\0\3\34\1\u015b"+
    "\12\34\1\u015c\3\34\4\0\30\34\106\0\1\u015d\115\0"+
    "\1\u015e\103\0\1\u015f\124\0\1\u0160\121\0\1\u0161\112\0"+
    "\1\u0162\137\0\1\u0163\102\0\1\u0164\115\0\1\u0165\123\0"+
    "\1\u0166\47\0\5\34\6\0\13\34\1\u0167\6\34\4\0"+
    "\30\34\27\0\5\34\6\0\7\34\1\u0168\12\34\4\0"+
    "\30\34\110\0\1\u0169\104\0\1\u016a\133\0\1\u016b\77\0"+
    "\1\u016c\127\0\1\u016d\106\0\1\u016e\124\0\1\u016f\117\0"+
    "\1\u0170\51\0\5\34\6\0\20\34\1\u0171\1\34\4\0"+
    "\30\34\27\0\5\34\6\0\12\34\1\u0172\7\34\4\0"+
    "\30\34\70\0\1\u0173\120\0\1\u0174\116\0\1\u0175\132\0"+
    "\1\u0176\117\0\1\u0177\123\0\1\u0178\110\0\1\u0179\46\0"+
    "\5\34\6\0\1\34\1\u017a\20\34\4\0\30\34\27\0"+
    "\5\34\6\0\5\34\1\u017b\14\34\4\0\30\34\105\0"+
    "\1\u017c\123\0\1\u017d\37\0\1\u017e\1\u017f\155\0\1\u0180"+
    "\130\0\1\u0181\107\0\1\u0182\134\0\1\u0183\40\0\5\34"+
    "\6\0\10\34\1\u0184\11\34\4\0\30\34\27\0\5\34"+
    "\6\0\10\34\1\u0185\11\34\4\0\30\34\106\0\1\u0186"+
    "\112\0\1\u0187\112\0\1\u0188\117\0\1\u0189\117\0\1\u018a"+
    "\1\0\1\u018b\126\0\1\u018c\124\0\1\u018d\110\0\1\u018e"+
    "\43\0\5\34\6\0\4\34\1\u018f\15\34\4\0\30\34"+
    "\27\0\5\34\6\0\4\34\1\u0190\15\34\4\0\30\34"+
    "\70\0\1\u0191\134\0\1\u0192\102\0\1\u0193\117\0\1\u0194"+
    "\130\0\1\u0195\117\0\1\u0196\113\0\1\u0197\122\0\1\u0198"+
    "\113\0\1\u0199\52\0\5\34\6\0\22\34\4\0\1\u019a"+
    "\27\34\27\0\5\34\6\0\22\34\4\0\1\u019b\27\34"+
    "\71\0\1\u019c\125\0\1\u019d\125\0\1\u019e\1\0\1\u019f"+
    "\1\u01a0\114\0\1\u01a1\1\0\1\u01a2\1\u01a3\117\0\1\u01a4"+
    "\112\0\1\u01a5\111\0\1\u01a6\51\0\5\34\6\0\14\34"+
    "\1\u01a7\5\34\4\0\30\34\27\0\5\34\6\0\14\34"+
    "\1\u01a8\5\34\4\0\30\34\103\0\1\u01a9\105\0\1\u01aa"+
    "\126\0\1\u01ab\114\0\1\u01ac\113\0\1\u01ad\126\0\1\u01ae"+
    "\114\0\1\u01af\117\0\1\u01b0\132\0\1\u01b1\36\0\5\34"+
    "\6\0\20\34\1\u01b2\1\34\4\0\30\34\27\0\5\34"+
    "\6\0\20\34\1\u01b3\1\34\4\0\30\34\107\0\1\u01b4"+
    "\124\0\1\u01b5\122\0\1\u01b6\105\0\1\u01b7\126\0\1\u01b8"+
    "\122\0\1\u01b9\105\0\1\u01ba\41\0\5\34\6\0\13\34"+
    "\1\u01bb\6\34\4\0\30\34\27\0\5\34\6\0\13\34"+
    "\1\u01bc\6\34\4\0\30\34\100\0\1\u01bd\120\0\1\u01be"+
    "\127\0\1\u01bf\102\0\1\u01c0\124\0\1\u01c1\127\0\1\u01c2"+
    "\102\0\1\u01c3\52\0\5\34\6\0\17\34\1\u01c4\2\34"+
    "\4\0\30\34\27\0\5\34\6\0\17\34\1\u01c5\2\34"+
    "\4\0\30\34\71\0\1\u01c6\125\0\1\u01c7\121\0\1\u01c8"+
    "\113\0\1\u01c9\121\0\1\u01ca\121\0\1\u01cb\113\0\1\u01cc"+
    "\51\0\5\34\6\0\4\34\1\u01cd\15\34\4\0\30\34"+
    "\27\0\5\34\6\0\4\34\1\u01ce\15\34\4\0\30\34"+
    "\71\0\1\u01cf\121\0\1\u01d0\134\0\1\u01d1\100\0\1\u01d2"+
    "\121\0\1\u01d3\134\0\1\u01d4\36\0\5\34\6\0\3\34"+
    "\1\u01d5\16\34\4\0\30\34\27\0\5\34\6\0\3\34"+
    "\1\u01d6\16\34\4\0\30\34\112\0\1\u01d7\116\0\1\u01d8"+
    "\120\0\1\u01d9\116\0\1\u01da\35\0\5\34\6\0\22\34"+
    "\4\0\1\u01db\27\34\27\0\5\34\6\0\22\34\4\0"+
    "\1\u01dc\27\34\101\0\1\u01dd\117\0\1\u01de\45\0\5\34"+
    "\6\0\16\34\1\u01df\3\34\4\0\30\34\27\0\5\34"+
    "\6\0\16\34\1\u01e0\3\34\4\0\30\34\106\0\1\u01e1"+
    "\117\0\1\u01e2\40\0\5\34\6\0\17\34\1\u01e3\2\34"+
    "\4\0\30\34\27\0\5\34\6\0\17\34\1\u01e4\2\34"+
    "\4\0\30\34\105\0\1\u01e5\117\0\1\u01e6\41\0\5\34"+
    "\6\0\15\34\1\u01e7\4\34\4\0\30\34\27\0\5\34"+
    "\6\0\15\34\1\u01e8\4\34\4\0\30\34\27\0\5\34"+
    "\6\0\7\34\1\u01e9\12\34\4\0\30\34\27\0\5\34"+
    "\6\0\7\34\1\u01ea\12\34\4\0\30\34\27\0\5\34"+
    "\6\0\12\34\1\u01eb\7\34\4\0\30\34\27\0\5\34"+
    "\6\0\12\34\1\u01ec\7\34\4\0\30\34\27\0\5\34"+
    "\6\0\5\34\1\u01ed\14\34\4\0\30\34\27\0\5\34"+
    "\6\0\5\34\1\u01ee\14\34\4\0\30\34\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[31200];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\11\7\1\2\11\2\1\1\11\6\1\1\11"+
    "\10\1\2\11\23\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\0\1\1\3\11\1\0\1\11\1\0\2\11\1\1"+
    "\2\11\1\0\2\11\2\1\1\11\1\1\3\11\1\1"+
    "\10\0\2\1\1\11\44\1\3\11\1\1\2\11\10\0"+
    "\46\1\6\0\1\11\1\0\41\1\1\0\1\11\4\0"+
    "\1\11\25\1\5\0\17\1\1\0\12\1\2\0\1\11"+
    "\2\0\7\1\14\0\6\1\16\0\6\1\1\0\1\11"+
    "\11\0\3\11\2\1\1\0\1\11\1\0\1\11\6\0"+
    "\2\1\2\0\1\1\4\0\1\11\2\1\7\0\2\1"+
    "\10\0\2\1\11\0\2\1\6\0\2\11\1\0\2\1"+
    "\1\0\1\11\6\0\1\11\2\0\2\1\7\0\2\11"+
    "\2\1\7\0\2\1\7\0\2\1\1\11\6\0\2\1"+
    "\2\0\1\11\2\0\1\11\2\1\1\0\1\11\1\0"+
    "\1\11\2\1\2\0\2\1\2\0\2\1\2\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[494];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _GDScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GDScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return REAL_NUMBER;
            }
          // fall through
          case 137: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 138: break;
          case 3:
            { return WHITE_SPACE;
            }
          // fall through
          case 139: break;
          case 4:
            { return LINE_BREAK;
            }
          // fall through
          case 140: break;
          case 5:
            { return BANG;
            }
          // fall through
          case 141: break;
          case 6:
            { return LINE_COMMENT;
            }
          // fall through
          case 142: break;
          case 7:
            { return NODE_PATH;
            }
          // fall through
          case 143: break;
          case 8:
            { return PERCENT;
            }
          // fall through
          case 144: break;
          case 9:
            { return AMPERSAND;
            }
          // fall through
          case 145: break;
          case 10:
            { return L_PAREN;
            }
          // fall through
          case 146: break;
          case 11:
            { return R_PAREN;
            }
          // fall through
          case 147: break;
          case 12:
            { return STAR;
            }
          // fall through
          case 148: break;
          case 13:
            { return PLUS;
            }
          // fall through
          case 149: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 150: break;
          case 15:
            { return MINUS;
            }
          // fall through
          case 151: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 152: break;
          case 17:
            { return SLASH;
            }
          // fall through
          case 153: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 154: break;
          case 19:
            { return SEMICOLON;
            }
          // fall through
          case 155: break;
          case 20:
            { return LESS;
            }
          // fall through
          case 156: break;
          case 21:
            { return EQUAL;
            }
          // fall through
          case 157: break;
          case 22:
            { return GREATER;
            }
          // fall through
          case 158: break;
          case 23:
            { return IDENTIFIER;
            }
          // fall through
          case 159: break;
          case 24:
            { return L_BRACKET;
            }
          // fall through
          case 160: break;
          case 25:
            { return R_BRACKET;
            }
          // fall through
          case 161: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 162: break;
          case 27:
            { return UNDERSCORE;
            }
          // fall through
          case 163: break;
          case 28:
            { return L_BRACE;
            }
          // fall through
          case 164: break;
          case 29:
            { return PIPE;
            }
          // fall through
          case 165: break;
          case 30:
            { return R_BRACE;
            }
          // fall through
          case 166: break;
          case 31:
            { return TILDE;
            }
          // fall through
          case 167: break;
          case 32:
            { return BANG_EQUAL;
            }
          // fall through
          case 168: break;
          case 33:
            { return DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 169: break;
          case 34:
            { return PERCENT_EQUAL;
            }
          // fall through
          case 170: break;
          case 35:
            { return AMPERSAND_AMPERSAND;
            }
          // fall through
          case 171: break;
          case 36:
            { return AMPERSAND_EQUAL;
            }
          // fall through
          case 172: break;
          case 37:
            { return SINGLE_QUOTED_STRING;
            }
          // fall through
          case 173: break;
          case 38:
            { return STAR_EQUAL;
            }
          // fall through
          case 174: break;
          case 39:
            { return PLUS_EQUAL;
            }
          // fall through
          case 175: break;
          case 40:
            { return MINUS_EQUAL;
            }
          // fall through
          case 176: break;
          case 41:
            { return ARROW;
            }
          // fall through
          case 177: break;
          case 42:
            { return DOT_DOT;
            }
          // fall through
          case 178: break;
          case 43:
            { return SLASH_EQUAL;
            }
          // fall through
          case 179: break;
          case 44:
            { return BINARY_NUMBER;
            }
          // fall through
          case 180: break;
          case 45:
            { return HEXADECIMAL_NUMBER;
            }
          // fall through
          case 181: break;
          case 46:
            { return INFER;
            }
          // fall through
          case 182: break;
          case 47:
            { return LESS_LESS;
            }
          // fall through
          case 183: break;
          case 48:
            { return LESS_EQUAL;
            }
          // fall through
          case 184: break;
          case 49:
            { return EQUAL_EQUAL;
            }
          // fall through
          case 185: break;
          case 50:
            { return GREATER_EQUAL;
            }
          // fall through
          case 186: break;
          case 51:
            { return GREATER_GREATER;
            }
          // fall through
          case 187: break;
          case 52:
            { return CARET_EQUAL;
            }
          // fall through
          case 188: break;
          case 53:
            { return AS;
            }
          // fall through
          case 189: break;
          case 54:
            { return IF;
            }
          // fall through
          case 190: break;
          case 55:
            { return IN;
            }
          // fall through
          case 191: break;
          case 56:
            { return IS;
            }
          // fall through
          case 192: break;
          case 57:
            { return OR;
            }
          // fall through
          case 193: break;
          case 58:
            { return PIPE_EQUAL;
            }
          // fall through
          case 194: break;
          case 59:
            { return PIPE_PIPE;
            }
          // fall through
          case 195: break;
          case 60:
            { return LESS_LESS_EQUAL;
            }
          // fall through
          case 196: break;
          case 61:
            { return GREATER_GREATER_EQUAL;
            }
          // fall through
          case 197: break;
          case 62:
            { return AND;
            }
          // fall through
          case 198: break;
          case 63:
            { return FOR;
            }
          // fall through
          case 199: break;
          case 64:
            { return GET;
            }
          // fall through
          case 200: break;
          case 65:
            { return INT;
            }
          // fall through
          case 201: break;
          case 66:
            { return NOT;
            }
          // fall through
          case 202: break;
          case 67:
            { return SET;
            }
          // fall through
          case 203: break;
          case 68:
            { return VAR;
            }
          // fall through
          case 204: break;
          case 69:
            { return AT_RPC;
            }
          // fall through
          case 205: break;
          case 70:
            { return SYNC;
            }
          // fall through
          case 206: break;
          case 71:
            { return BOOL;
            }
          // fall through
          case 207: break;
          case 72:
            { return ELIF;
            }
          // fall through
          case 208: break;
          case 73:
            { return ELSE;
            }
          // fall through
          case 209: break;
          case 74:
            { return ENUM;
            }
          // fall through
          case 210: break;
          case 75:
            { return FUNC;
            }
          // fall through
          case 211: break;
          case 76:
            { return NULL;
            }
          // fall through
          case 212: break;
          case 77:
            { return PASS;
            }
          // fall through
          case 213: break;
          case 78:
            { return SELF;
            }
          // fall through
          case 214: break;
          case 79:
            { return TOOL;
            }
          // fall through
          case 215: break;
          case 80:
            { return TRUE;
            }
          // fall through
          case 216: break;
          case 81:
            { return VOID;
            }
          // fall through
          case 217: break;
          case 82:
            { return AT_ICON;
            }
          // fall through
          case 218: break;
          case 83:
            { return AT_TOOL;
            }
          // fall through
          case 219: break;
          case 84:
            { return AWAIT;
            }
          // fall through
          case 220: break;
          case 85:
            { return BREAK;
            }
          // fall through
          case 221: break;
          case 86:
            { return CLASS;
            }
          // fall through
          case 222: break;
          case 87:
            { return CONST;
            }
          // fall through
          case 223: break;
          case 88:
            { return FALSE;
            }
          // fall through
          case 224: break;
          case 89:
            { return FLOAT;
            }
          // fall through
          case 225: break;
          case 90:
            { return MATCH;
            }
          // fall through
          case 226: break;
          case 91:
            { return SUPER;
            }
          // fall through
          case 227: break;
          case 92:
            { return WHILE;
            }
          // fall through
          case 228: break;
          case 93:
            { return YIELD;
            }
          // fall through
          case 229: break;
          case 94:
            { return ASSERT;
            }
          // fall through
          case 230: break;
          case 95:
            { return MASTER;
            }
          // fall through
          case 231: break;
          case 96:
            { return PUPPET;
            }
          // fall through
          case 232: break;
          case 97:
            { return REMOTE;
            }
          // fall through
          case 233: break;
          case 98:
            { return RETURN;
            }
          // fall through
          case 234: break;
          case 99:
            { return SETGET;
            }
          // fall through
          case 235: break;
          case 100:
            { return SIGNAL;
            }
          // fall through
          case 236: break;
          case 101:
            { return STATIC;
            }
          // fall through
          case 237: break;
          case 102:
            { return AT_EXPORT;
            }
          // fall through
          case 238: break;
          case 103:
            { return AT_MASTER;
            }
          // fall through
          case 239: break;
          case 104:
            { return AT_PUPPET;
            }
          // fall through
          case 240: break;
          case 105:
            { return AT_REMOTE;
            }
          // fall through
          case 241: break;
          case 106:
            { return EXTENDS;
            }
          // fall through
          case 242: break;
          case 107:
            { return AT_ONREADY;
            }
          // fall through
          case 243: break;
          case 108:
            { return CONTINUE;
            }
          // fall through
          case 244: break;
          case 109:
            { return BREAKPOINT;
            }
          // fall through
          case 245: break;
          case 110:
            { return CLASS_NAME;
            }
          // fall through
          case 246: break;
          case 111:
            { return MASTERSYNC;
            }
          // fall through
          case 247: break;
          case 112:
            { return PUPPETSYNC;
            }
          // fall through
          case 248: break;
          case 113:
            { return REMOTESYNC;
            }
          // fall through
          case 249: break;
          case 114:
            { return AT_EXPORT_DIR;
            }
          // fall through
          case 250: break;
          case 115:
            { return AT_MASTERSYNC;
            }
          // fall through
          case 251: break;
          case 116:
            { return AT_PUPPETSYNC;
            }
          // fall through
          case 252: break;
          case 117:
            { return AT_REMOTESYNC;
            }
          // fall through
          case 253: break;
          case 118:
            { return AT_EXPORT_ENUM;
            }
          // fall through
          case 254: break;
          case 119:
            { return AT_EXPORT_FILE;
            }
          // fall through
          case 255: break;
          case 120:
            { return AT_EXPORT_FLAGS;
            }
          // fall through
          case 256: break;
          case 121:
            { return AT_EXPORT_RANGE;
            }
          // fall through
          case 257: break;
          case 122:
            { return AT_EXPORT_MULTILINE;
            }
          // fall through
          case 258: break;
          case 123:
            { return AT_EXPORT_NODE_PATH;
            }
          // fall through
          case 259: break;
          case 124:
            { return AT_EXPORT_EXP_EASING;
            }
          // fall through
          case 260: break;
          case 125:
            { return AT_EXPORT_GLOBAL_DIR;
            }
          // fall through
          case 261: break;
          case 126:
            { return AT_EXPORT_GLOBAL_FILE;
            }
          // fall through
          case 262: break;
          case 127:
            { return AT_EXPORT_PLACEHOLDER;
            }
          // fall through
          case 263: break;
          case 128:
            { return AT_EXPORT_COLOR_NO_ALPHA;
            }
          // fall through
          case 264: break;
          case 129:
            { return AT_EXPORT_FLAGS_2D_RENDER;
            }
          // fall through
          case 265: break;
          case 130:
            { return AT_EXPORT_FLAGS_3D_RENDER;
            }
          // fall through
          case 266: break;
          case 131:
            { return AT_EXPORT_FLAGS_2D_PHYSICS;
            }
          // fall through
          case 267: break;
          case 132:
            { return AT_EXPORT_FLAGS_3D_PHYSICS;
            }
          // fall through
          case 268: break;
          case 133:
            { return AT_EXPORT_FLAGS_2D_NAVIGATION;
            }
          // fall through
          case 269: break;
          case 134:
            { return AT_EXPORT_FLAGS_3D_NAVIGATION;
            }
          // fall through
          case 270: break;
          case 135:
            { return MULTILINE_DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 271: break;
          case 136:
            { return MULTILINE_SINGLE_QUOTED_STRING;
            }
          // fall through
          case 272: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
