{
    parserClass = "com.github.floralvikings.godotea.language.gdscript.parser.GDScriptParser"
    parserUtilClass = "com.github.floralvikings.godotea.language.gdscript.parser.GDScriptParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "GDScript"
    psiImplClassSuffix = "Impl"
    psiPackage = "com.github.floralvikings.godotea.language.gdscript.psi"
    psiImplPackage = "com.github.floralvikings.godotea.language.gdscript.psi.impl"
    psiImplUtilClass = "com.github.floralvikings.godotea.language.gdscript.psi.GDScriptImplPsiUtil"

    elementTypeHolderClass = "com.github.floralvikings.godotea.language.gdscript.psi.GDScriptTypes"
    elementTypeClass = "com.github.floralvikings.godotea.language.gdscript.psi.GDScriptElementType"
    tokenTypeClass = "com.github.floralvikings.godotea.language.gdscript.psi.GDScriptTokenType"

    extends(".*_expression")=expression

    tokens = [
        //region keywords
        VAR = "var"
        CONST = "const"
        ENUM = "enum"
        FUNC = "func"
        IF = "if"
        ELIF = "elif"
        ELSE = "else"
        FOR = "for"
        WHILE = "while"
        BREAK = "break"
        CONTINUE = "continue"
        PASS = "pass"
        RETURN = "return"
        MATCH = "match"
        ASSERT = "assert"
        AWAIT = "await"
        BREAKPOINT = "breakpoint"
        CLASS = "class"
        CLASS_NAME = "class_name"
        EXTENDS = "extends"
        SUPER = "super"
        SELF = "self"
        SIGNAL = "signal"
        STATIC = "static"
        SET = "set"
        GET = "get"
        TRUE = "true"
        FALSE = "false"
        NULL = "null"
        AND = "and"
        OR = "or"
        NOT = "not"
        INT = "int"
        FLOAT = "float"
        BOOL = "bool"
        VOID = "void"
        IN = "in"
        IS = "is"
        AS = "as"
        //endregion

        //region annotations
        AT_EXPORT = "@export"
        AT_EXPORT_CATEGORY = "@export_category"
        AT_EXPORT_COLOR_NO_ALPHA = "@export_color_no_alpha"
        AT_EXPORT_DIR = "@export_dir"
        AT_EXPORT_ENUM = "@export_enum"
        AT_EXPORT_EXP_EASING = "@export_exp_easing"
        AT_EXPORT_FILE = "@export_file"
        AT_EXPORT_FLAGS = "@export_flags"
        AT_EXPORT_FLAGS_2D_NAVIGATION = "@export_flags_2d_navigation"
        AT_EXPORT_FLAGS_2D_PHYSICS = "@export_flags_2d_physics"
        AT_EXPORT_FLAGS_2D_RENDER = "@export_flags_2d_render"
        AT_EXPORT_FLAGS_3D_NAVIGATION = "@export_flags_3d_navigation"
        AT_EXPORT_FLAGS_3D_PHYSICS = "@export_flags_3d_physics"
        AT_EXPORT_FLAGS_3D_RENDER = "@export_flags_3d_render"
        AT_EXPORT_FLAGS_AVOIDANCE = "@export_flags_avoidance"
        AT_EXPORT_GLOBAL_DIR = "@export_global_dir"
        AT_EXPORT_GLOBAL_FILE = "@export_global_file"
        AT_EXPORT_GROUP = "@export_group"
        AT_EXPORT_MULTILINE = "@export_multiline"
        AT_EXPORT_NODE_PATH = "@export_node_path"
        AT_EXPORT_PLACEHOLDER = "@export_placeholder"
        AT_EXPORT_RANGE = "@export_range"
        AT_EXPORT_SUBGROUP = "@export_subgroup"
        AT_ICON = "@icon"
        AT_ONREADY = "@onready"
        AT_RPC = "@rpc"
        AT_STATIC_UNLOAD = "@static_unload"
        AT_TOOL = "@tool"
        AT_WARNING_IGNORE = "@warning_ignore"
        //endregion

        //region operators
        LESS = "<"
        LESS_EQUAL = "<="
        GREATER = ">"
        GREATER_EQUAL = ">="
        EQUAL_EQUAL = "=="
        BANG_EQUAL = "!="
        AMPERSAND_AMPERSAND = "&&"
        PIPE_PIPE = "||"
        BANG = "!"
        AMPERSAND = "&"
        PIPE = "|"
        TILDE = "~"
        CARET = "^"
        LESS_LESS = "<<"
        GREATER_GREATER = ">>"
        PLUS = "+"
        MINUS = "-"
        STAR = "*"
        SLASH = "/"
        PERCENT = "%"
        DOT = "."
        DOT_DOT = ".."
        EQUAL = "="
        PLUS_EQUAL = "+="
        MINUS_EQUAL = "-="
        STAR_EQUAL = "*="
        SLASH_EQUAL = "/="
        PERCENT_EQUAL = "%="
        LESS_LESS_EQUAL = "<<="
        GREATER_GREATER_EQUAL = ">>="
        AMPERSAND_EQUAL = "&="
        PIPE_EQUAL = "|="
        CARET_EQUAL = "^="
        INFER = ":="
        L_BRACKET = "["
        R_BRACKET = "]"
        L_BRACE = "{"
        R_BRACE = "}"
        L_PAREN = "("
        R_PAREN = ")"
        COMMA = ","
        SEMICOLON = ";"
        COLON = ":"
        ARROW = "->"
        UNDERSCORE = "_"
        //endregion

        LINE_BREAK = "regexp:\n"
        WHITE_SPACE = "regexp:[ \t]"
        NODE_PATH = "regexp:\$\"?[A-Za-z0-9_/.]*\"?"
        IDENTIFIER = "regexp:[A-Za-z_][A-Za-z0-9_]*"
        LINE_COMMENT = "regexp:#[^\n]*"

        //region literals
        REAL_NUMBER = "regexp:-?[0-9_]*(\.)?([0-9_]+)?([Ee][-+]?[0-9]+)?"
        BINARY_NUMBER = "regexp:0b[10_]*"
        HEXADECIMAL_NUMBER = "regexp:0x[0-9A-Fa-f_]*"

        DOUBLE_QUOTED_STRING = "regexp:\"([^\"\\]|\\.)*\""
        SINGLE_QUOTED_STRING = "regexp:'([^'\\]|\\.)*'"
        //endregion
    ]
}

root ::= LINE_BREAK* (top_level_annotation end_of_statement?)*
    LINE_BREAK* ((class_name_declaration | extends_declaration) end_of_statement LINE_BREAK*)* (LINE_BREAK | (top_level_statement end_of_statement))*

private meta listOf ::= <<p1>> (<<p2>> <<p1>>)*

external INDEQ ::= indEq
external INDLT ::= indLt
external INDGT ::= indGt
external INDNONE ::= indNone

private top_level_statement ::= class_var_declaration
    | class_const_declaration
    | signal_declaration
    | enum_declaration
    | function_declaration
    | inner_class_declaration

private class_statement ::= class_var_declaration
    | class_const_declaration
    | signal_declaration
    | enum_declaration
    | function_declaration
    | extends_declaration

top_level_annotation ::= (AT_ICON call) | AT_TOOL

extends_declaration ::= EXTENDS (type | string)
class_name_declaration ::= CLASS_NAME id

class_var_declaration ::= ((var_export LINE_BREAK*) | (AT_ONREADY LINE_BREAK*))* VAR class_var_name (
    (COLON(type(
        ((LINE_BREAK (block_get|block_set))+)
        | ([(EQUAL|INFER) expression])
    )))
    | (COLON set_get)
    | [(EQUAL | INFER) expression]
) {
    mixin="GDScriptNamedElementImpl"
    implements=["GDScriptNamedElement"]
    methods=[getName setName getNameIdentifier getTextOffset]
}

block_get ::= <<indented (GET COLON LINE_BREAK block)>>
block_set ::= <<indented (SET L_PAREN function_parameter R_PAREN COLON LINE_BREAK block)>>

var_export ::= export_annotation call?
private export_annotation ::= AT_EXPORT
    | AT_EXPORT_CATEGORY
    | AT_EXPORT_COLOR_NO_ALPHA
    | AT_EXPORT_DIR
    | AT_EXPORT_ENUM
    | AT_EXPORT_EXP_EASING
    | AT_EXPORT_FILE
    | AT_EXPORT_FLAGS
    | AT_EXPORT_FLAGS_2D_NAVIGATION
    | AT_EXPORT_FLAGS_2D_PHYSICS
    | AT_EXPORT_FLAGS_2D_RENDER
    | AT_EXPORT_FLAGS_3D_NAVIGATION
    | AT_EXPORT_FLAGS_3D_PHYSICS
    | AT_EXPORT_FLAGS_3D_RENDER
    | AT_EXPORT_FLAGS_AVOIDANCE
    | AT_EXPORT_GLOBAL_DIR
    | AT_EXPORT_GLOBAL_FILE
    | AT_EXPORT_GROUP
    | AT_EXPORT_MULTILINE
    | AT_EXPORT_NODE_PATH
    | AT_EXPORT_PLACEHOLDER
    | AT_EXPORT_RANGE
    | AT_EXPORT_SUBGROUP

set_get ::= set_or_get [COMMA set_or_get]

set_or_get ::= (SET | GET) EQUAL id

class_const_declaration ::= CONST id [COLON type] EQUAL expression

signal_declaration ::= SIGNAL id signal_parameters?
signal_parameters ::= L_PAREN [type (COMMA type)*] R_PAREN

enum_declaration ::= ENUM id? (L_BRACE LINE_BREAK* enum_entry? LINE_BREAK* (COMMA LINE_BREAK* enum_entry LINE_BREAK*)* COMMA? LINE_BREAK* R_BRACE)?
enum_entry ::= id (EQUAL expression)?

function_declaration ::= function_annotations? STATIC? FUNC function_name function_declaration_parameters function_return_type? COLON function_body {
    pin=7
    mixin="GDScriptNamedElementImpl"
    implements=["GDScriptNamedElement"]
    methods=[getName setName getNameIdentifier getTextOffset]
}

private function_annotations ::= AT_RPC LINE_BREAK*
private function_body ::= LINE_BREAK* block
function_declaration_parameters ::= L_PAREN LINE_BREAK* function_parameter_list LINE_BREAK* R_PAREN
private function_parameter_list ::= function_parameter? LINE_BREAK* (COMMA LINE_BREAK* function_parameter LINE_BREAK*)* COMMA?
function_parameter ::= parameter_name (COLON type)? ((EQUAL | INFER) expression)? {
    mixin="GDScriptNamedElementImpl"
    implements=["GDScriptNamedElement"]
    methods=[getName setName getNameIdentifier getTextOffset]
}
function_return_type ::= ARROW type

inner_class_declaration ::= CLASS id extends_declaration? COLON inner_class_body {
    pin=4
}
private inner_class_body ::= LINE_BREAK*  class_block


block        ::= <<indented <<listOf (&INDEQ script_statement) end_of_block_statement>>>>
class_block  ::= <<indented <<listOf (&INDEQ class_statement) end_of_block_statement>>>>

end_of_block_statement ::= end_of_statement (((&INDNONE | &INDEQ) LINE_BREAK+)+ | (&INDEQ))

script_statement ::= var_statement
    | const_statement
    | if_statement
    | for_statement
    | while_statement
    | match_statement
    | return_statement
    | continue_statement
    | break_statement
    | assign_statement
    | expression_statement
    | assert_statement
    | await_statement
    | PASS

if_statement ::= IF expression COLON statement_or_block (LINE_BREAK* elif_statement)* [LINE_BREAK* else_statement] {
    pin=3
}
elif_statement ::= ELIF expression COLON statement_or_block {
    pin = 3
}
else_statement ::= ELSE COLON statement_or_block {
    pin = 2
}

for_statement ::= FOR id IN expression COLON statement_or_block

while_statement ::= WHILE expression COLON statement_or_block

match_statement ::= MATCH expression COLON LINE_BREAK* <<indented match_block>>
match_block ::= pattern_list COLON statement_or_block (LINE_BREAK* pattern_list COLON statement_or_block)*
pattern_list ::= pattern (COMMA pattern)*
pattern ::= string
    | multiline_string
    | REAL_NUMBER
    | BINARY_NUMBER
    | HEXADECIMAL_NUMBER
    | UNDERSCORE
    | NULL
    | IDENTIFIER
    | binding_pattern
    | array_pattern
    | dict_pattern
binding_pattern ::= VAR IDENTIFIER
array_pattern ::= L_BRACKET [pattern [(COMMA pattern)+] (COMMA DOT_DOT)?]  R_BRACKET
dict_pattern ::= L_BRACE [key_value_pattern [(COMMA key_value_pattern)+] (COMMA DOT_DOT)?] R_BRACE
key_value_pattern ::= string [COLON pattern]

private statement_or_block ::= inline_statement | new_line_block
private inline_statement ::= script_statement end_of_statement
private new_line_block ::= LINE_BREAK* block

return_statement ::= RETURN expression
continue_statement ::= CONTINUE
break_statement ::= BREAK

assign_statement ::= expression assign_operator [AWAIT] expression
assign_operator ::= EQUAL
    | PLUS_EQUAL
    | MINUS_EQUAL
    | STAR_EQUAL
    | SLASH_EQUAL
    | PERCENT_EQUAL
    | LESS_LESS_EQUAL
    | GREATER_GREATER_EQUAL
    | AMPERSAND_EQUAL
    | PIPE_EQUAL
    | CARET_EQUAL
    | INFER

var_statement ::= VAR local_var_name (COLON type)? ((EQUAL | INFER) AWAIT? expression)? {
    mixin="GDScriptNamedElementImpl"
    implements=["GDScriptNamedElement"]
    methods=[getName setName getNameIdentifier getTextOffset]
}
const_statement ::= CONST id (COLON type)? (EQUAL | INFER) expression
expression_statement ::= expression
assert_statement ::= ASSERT L_PAREN expression [COMMA string] R_PAREN
await_statement ::= AWAIT expression


// region expression
expression ::= operator? <<listOf operand operator>>
private operand ::= paren_expression
    | array_expression
    | dictionary_expression
    | lua_dictionary_expression
    | lambda_expression
    | string
    | multiline_string
    | dot_qualified_expression
    | invocation_expression
    | id_expression
    | REAL_NUMBER
    | BINARY_NUMBER
    | HEXADECIMAL_NUMBER
    | TRUE
    | FALSE
    | NULL
    | SELF
private operator ::= LESS
    | LESS_EQUAL
    | GREATER
    | GREATER_EQUAL
    | EQUAL_EQUAL
    | BANG_EQUAL
    | AMPERSAND_AMPERSAND
    | PIPE_PIPE
    | BANG
    | AMPERSAND
    | PIPE
    | TILDE
    | CARET
    | LESS_LESS
    | GREATER_GREATER
    | PLUS
    | MINUS
    | STAR
    | SLASH
    | PERCENT
    | DOT
    | DOT_DOT
    | IS
    | AS
    | IN
    | AND
    | OR
    | NOT
    | IF
    | ELSE

paren_expression ::= L_PAREN expression R_PAREN

array_expression ::= id? L_BRACKET LINE_BREAK* array_argument? LINE_BREAK* (COMMA LINE_BREAK* array_argument LINE_BREAK*)* COMMA? LINE_BREAK* R_BRACKET
array_argument ::= (VAR? expression) | DOT_DOT | UNDERSCORE

dictionary_expression ::= L_BRACE LINE_BREAK* dictionary_entry? LINE_BREAK* (COMMA LINE_BREAK* dictionary_entry LINE_BREAK*)* COMMA? LINE_BREAK* R_BRACE
dictionary_entry ::= (key LINE_BREAK* (COLON LINE_BREAK* VAR? expression)?) | DOT_DOT

lua_dictionary_expression ::= L_BRACE LINE_BREAK* lua_dictionary_entry? LINE_BREAK* (COMMA LINE_BREAK* lua_dictionary_entry LINE_BREAK*)* COMMA? LINE_BREAK* R_BRACE
lua_dictionary_entry ::= (key EQUAL expression) | DOT_DOT

dot_qualified_expression ::= (invocation_expression | id) (DOT (invocation_expression | id))+

invocation_expression ::= id call
call ::= L_PAREN LINE_BREAK* expression? LINE_BREAK* (COMMA LINE_BREAK* expression LINE_BREAK*)* R_PAREN

lambda_expression ::= FUNC id? L_PAREN id? (COMMA id)* R_PAREN COLON (inline_statement | function_body)

id_expression ::= id

key ::= expression
type ::= array_type | nested_type
private array_type ::= id (L_BRACKET id R_BRACKET)
private nested_type ::= id (DOT id)*

function_name ::= IDENTIFIER
parameter_name ::= IDENTIFIER
class_var_name ::= IDENTIFIER
local_var_name ::= IDENTIFIER

id ::= IDENTIFIER | INT | FLOAT | BOOL | VOID | NODE_PATH | SUPER {methods = [getReference]}
string ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
private multiline_string ::= MULTILINE_SINGLE_QUOTED_STRING | MULTILINE_DOUBLE_QUOTED_STRING

// TODO Handle line continuation; currently doesn't work
private end_of_statement ::= (LINE_BREAK |  <<eof>> | SEMICOLON+)